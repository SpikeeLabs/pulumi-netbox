{
    "name": "netbox",
    "displayName": "Netbox",
    "description": "A Pulumi package for creating and managing Netbox resources.",
    "keywords": [
        "pulumi",
        "netbox",
        "category/cloud"
    ],
    "homepage": "https://github.com/hbjydev/pulumi-netbox",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`netbox` Terraform Provider](https://github.com/e-breuninger/terraform-provider-netbox).",
    "repository": "https://github.com/hbjydev/pulumi-netbox",
    "publisher": "Hayden Young",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/hbjydev/pulumi-netbox/sdk/go/netbox"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Netbox resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/e-breuninger/terraform-provider-netbox)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-netbox` repo](https://github.com/hbjydev/pulumi-netbox/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-netbox` repo](https://github.com/e-breuninger/terraform-provider-netbox/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/e-breuninger/terraform-provider-netbox)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-netbox` repo](https://github.com/hbjydev/pulumi-netbox/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-netbox` repo](https://github.com/e-breuninger/terraform-provider-netbox/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "allowInsecureHttps": {
                "type": "boolean",
                "description": "Flag to set whether to allow https with invalid certificates\n"
            },
            "apiToken": {
                "type": "string",
                "description": "Netbox API authentication token\n",
                "defaultInfo": {
                    "environment": [
                        "NETBOX_API_TOKEN"
                    ]
                }
            },
            "headers": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "pulumi.json#/Any"
                },
                "description": "Set these header on all requests to Netbox\n"
            },
            "serverUrl": {
                "type": "string",
                "description": "Location of Netbox server including scheme and optional port\n",
                "defaultInfo": {
                    "environment": [
                        "NETBOX_SERVER_URL"
                    ]
                }
            },
            "skipVersionCheck": {
                "type": "boolean",
                "description": "If true, do not try to determine the running Netbox version at provider startup. Disables warnings about possibly\nunsupported Netbox version. Also useful for local testing on terraform plans.\n"
            }
        },
        "defaults": [
            "apiToken",
            "serverUrl"
        ]
    },
    "types": {
        "netbox:index/getInterfacesFilter:getInterfacesFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getInterfacesInterface:getInterfacesInterface": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mtu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taggedVlans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:index/getInterfacesInterfaceTaggedVlan:getInterfacesInterfaceTaggedVlan"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "untaggedVlans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:index/getInterfacesInterfaceUntaggedVlan:getInterfacesInterfaceUntaggedVlan"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "enabled",
                "macAddress",
                "mode",
                "mtu",
                "name",
                "tagIds",
                "taggedVlans",
                "untaggedVlans",
                "vmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getInterfacesInterfaceTaggedVlan:getInterfacesInterfaceTaggedVlan": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vid": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "vid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getInterfacesInterfaceUntaggedVlan:getInterfacesInterfaceUntaggedVlan": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vid": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "vid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getIpAddressesFilter:getIpAddressesFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getIpAddressesIpAddress:getIpAddressesIpAddress": {
            "properties": {
                "addressFamily": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "created": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdated": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:index/getIpAddressesIpAddressTenant:getIpAddressesIpAddressTenant"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addressFamily",
                "created",
                "customFields",
                "description",
                "dnsName",
                "id",
                "ipAddress",
                "lastUpdated",
                "role",
                "status",
                "tenants"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getIpAddressesIpAddressTenant:getIpAddressesIpAddressTenant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getRegionFilter:getRegionFilter": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "netbox:index/getTenantsFilter:getTenantsFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getTenantsTenant:getTenantsTenant": {
            "properties": {
                "circuitCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "comments": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "created": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddressCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdated": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rackCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "siteCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:index/getTenantsTenantTenantGroup:getTenantsTenantTenantGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vlanCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vrfCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "circuitCount",
                "clusterCount",
                "comments",
                "created",
                "customFields",
                "description",
                "deviceCount",
                "id",
                "ipAddressCount",
                "lastUpdated",
                "name",
                "prefixCount",
                "rackCount",
                "siteCount",
                "slug",
                "tenantGroups",
                "vlanCount",
                "vmCount",
                "vrfCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getTenantsTenantTenantGroup:getTenantsTenantTenantGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "slug",
                "tenantCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getVirtualMachinesFilter:getVirtualMachinesFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getVirtualMachinesVm:getVirtualMachinesVm": {
            "properties": {
                "clusterId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "comments": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configContext": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSizeGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localContextData": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryMb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "platformId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryIp4": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryIp6": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "siteId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vcpus": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "comments",
                "configContext",
                "customFields",
                "diskSizeGb",
                "localContextData",
                "memoryMb",
                "name",
                "platformId",
                "primaryIp",
                "primaryIp4",
                "primaryIp6",
                "roleId",
                "siteId",
                "status",
                "tagIds",
                "tenantId",
                "vcpus",
                "vmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the netbox package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "allowInsecureHttps": {
                "type": "boolean",
                "description": "Flag to set whether to allow https with invalid certificates\n"
            },
            "apiToken": {
                "type": "string",
                "description": "Netbox API authentication token\n"
            },
            "headers": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "pulumi.json#/Any"
                },
                "description": "Set these header on all requests to Netbox\n"
            },
            "serverUrl": {
                "type": "string",
                "description": "Location of Netbox server including scheme and optional port\n"
            },
            "skipVersionCheck": {
                "type": "boolean",
                "description": "If true, do not try to determine the running Netbox version at provider startup. Disables warnings about possibly\nunsupported Netbox version. Also useful for local testing on terraform plans.\n"
            }
        },
        "inputProperties": {
            "allowInsecureHttps": {
                "type": "boolean",
                "description": "Flag to set whether to allow https with invalid certificates\n"
            },
            "apiToken": {
                "type": "string",
                "description": "Netbox API authentication token\n",
                "defaultInfo": {
                    "environment": [
                        "NETBOX_API_TOKEN"
                    ]
                }
            },
            "headers": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "pulumi.json#/Any"
                },
                "description": "Set these header on all requests to Netbox\n"
            },
            "serverUrl": {
                "type": "string",
                "description": "Location of Netbox server including scheme and optional port\n",
                "defaultInfo": {
                    "environment": [
                        "NETBOX_SERVER_URL"
                    ]
                }
            },
            "skipVersionCheck": {
                "type": "boolean",
                "description": "If true, do not try to determine the running Netbox version at provider startup. Disables warnings about possibly\nunsupported Netbox version. Also useful for local testing on terraform plans.\n"
            }
        }
    },
    "resources": {
        "netbox:index/aggregate:Aggregate": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/ipam/#aggregates):\n\n\u003e NetBox allows us to specify the portions of IP space that are interesting to us by defining aggregates. Typically, an aggregate will correspond to either an allocation of public (globally routable) IP space granted by a regional authority, or a private (internally-routable) designation.\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "rirId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "required": [
                "prefix"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "rirId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "prefix"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Aggregate resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "prefix": {
                        "type": "string"
                    },
                    "rirId": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/availableIpAddress:AvailableIpAddress": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "dnsName": {
                    "type": "string"
                },
                "interfaceId": {
                    "type": "integer"
                },
                "ipAddress": {
                    "type": "string"
                },
                "ipRangeId": {
                    "type": "integer"
                },
                "prefixId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "required": [
                "ipAddress"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "dnsName": {
                    "type": "string"
                },
                "interfaceId": {
                    "type": "integer"
                },
                "ipRangeId": {
                    "type": "integer"
                },
                "prefixId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AvailableIpAddress resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "dnsName": {
                        "type": "string"
                    },
                    "interfaceId": {
                        "type": "integer"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "ipRangeId": {
                        "type": "integer"
                    },
                    "prefixId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/availablePrefix:AvailablePrefix": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst testPrefix = netbox.getPrefix({\n    cidr: \"10.0.0.0/24\",\n});\nconst testAvailablePrefix = new netbox.AvailablePrefix(\"testAvailablePrefix\", {\n    parentPrefixId: testPrefix.then(testPrefix =\u003e testPrefix.id),\n    prefixLength: 25,\n    status: \"active\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_prefix = netbox.get_prefix(cidr=\"10.0.0.0/24\")\ntest_available_prefix = netbox.AvailablePrefix(\"testAvailablePrefix\",\n    parent_prefix_id=test_prefix.id,\n    prefix_length=25,\n    status=\"active\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testPrefix = Netbox.GetPrefix.Invoke(new()\n    {\n        Cidr = \"10.0.0.0/24\",\n    });\n\n    var testAvailablePrefix = new Netbox.AvailablePrefix(\"testAvailablePrefix\", new()\n    {\n        ParentPrefixId = testPrefix.Apply(getPrefixResult =\u003e getPrefixResult.Id),\n        PrefixLength = 25,\n        Status = \"active\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestPrefix, err := netbox.LookupPrefix(ctx, \u0026GetPrefixArgs{\n\t\t\tCidr: \"10.0.0.0/24\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.NewAvailablePrefix(ctx, \"testAvailablePrefix\", \u0026netbox.AvailablePrefixArgs{\n\t\t\tParentPrefixId: pulumi.Int(testPrefix.Id),\n\t\t\tPrefixLength:   pulumi.Int(25),\n\t\t\tStatus:         pulumi.String(\"active\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetPrefixArgs;\nimport com.pulumi.netbox.AvailablePrefix;\nimport com.pulumi.netbox.AvailablePrefixArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testPrefix = NetboxFunctions.getPrefix(GetPrefixArgs.builder()\n            .cidr(\"10.0.0.0/24\")\n            .build());\n\n        var testAvailablePrefix = new AvailablePrefix(\"testAvailablePrefix\", AvailablePrefixArgs.builder()        \n            .parentPrefixId(testPrefix.applyValue(getPrefixResult -\u003e getPrefixResult.id()))\n            .prefixLength(25)\n            .status(\"active\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testAvailablePrefix:\n    type: netbox:AvailablePrefix\n    properties:\n      parentPrefixId: ${testPrefix.id}\n      prefixLength: 25\n      status: active\nvariables:\n  testPrefix:\n    Fn::Invoke:\n      Function: netbox:getPrefix\n      Arguments:\n        cidr: 10.0.0.0/24\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string"
                },
                "isPool": {
                    "type": "boolean"
                },
                "markUtilized": {
                    "type": "boolean"
                },
                "parentPrefixId": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vlanId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "required": [
                "parentPrefixId",
                "prefix",
                "prefixLength",
                "status"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "isPool": {
                    "type": "boolean"
                },
                "markUtilized": {
                    "type": "boolean"
                },
                "parentPrefixId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "prefixLength": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vlanId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "parentPrefixId",
                "prefixLength",
                "status"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AvailablePrefix resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "isPool": {
                        "type": "boolean"
                    },
                    "markUtilized": {
                        "type": "boolean"
                    },
                    "parentPrefixId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "prefix": {
                        "type": "string"
                    },
                    "prefixLength": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "vlanId": {
                        "type": "integer"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/circuit:Circuit": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/circuits/#circuits_1):\n\n\u003e A communications circuit represents a single physical link connecting exactly two endpoints, commonly referred to as its A and Z terminations. A circuit in NetBox may have zero, one, or two terminations defined. It is common to have only one termination defined when you don't necessarily care about the details of the provider side of the circuit, e.g. for Internet access circuits. Both terminations would likely be modeled for circuits which connect one customer site to another.\n\u003e \n\u003e Each circuit is associated with a provider and a user-defined type. For example, you might have Internet access circuits delivered to each site by one provider, and private MPLS circuits delivered by another. Each circuit must be assigned a circuit ID, each of which must be unique per provider.\n",
            "properties": {
                "cid": {
                    "type": "string"
                },
                "providerId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "integer"
                },
                "typeId": {
                    "type": "integer"
                }
            },
            "required": [
                "cid",
                "providerId",
                "status",
                "typeId"
            ],
            "inputProperties": {
                "cid": {
                    "type": "string"
                },
                "providerId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "integer"
                },
                "typeId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "cid",
                "providerId",
                "status",
                "typeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Circuit resources.\n",
                "properties": {
                    "cid": {
                        "type": "string"
                    },
                    "providerId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "typeId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/circuitProvider:CircuitProvider": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/circuits/#providers):\n\n\u003e A circuit provider is any entity which provides some form of connectivity of among sites or organizations within a site. While this obviously includes carriers which offer Internet and private transit service, it might also include Internet exchange (IX) points and even organizations with whom you peer directly. Each circuit within NetBox must be assigned a provider and a circuit ID which is unique to that provider.\n\u003e\n\u003e Each provider may be assigned an autonomous system number (ASN), an account number, and contact information.\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CircuitProvider resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/circuitTermination:CircuitTermination": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/circuits/#circuit-terminations):\n\n\u003e The association of a circuit with a particular site and/or device is modeled separately as a circuit termination. A circuit may have up to two terminations, labeled A and Z. A single-termination circuit can be used when you don't know (or care) about the far end of a circuit (for example, an Internet access circuit which connects to a transit provider). A dual-termination circuit is useful for tracking circuits which connect two sites.\n\u003e\n\u003e Each circuit termination is attached to either a site or to a provider network. Site terminations may optionally be connected via a cable to a specific device interface or port within that site. Each termination must be assigned a port speed, and can optionally be assigned an upstream speed if it differs from the downstream speed (a common scenario with e.g. DOCSIS cable modems). Fields are also available to track cross-connect and patch panel details.\n",
            "properties": {
                "circuitId": {
                    "type": "integer"
                },
                "portSpeed": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "termSide": {
                    "type": "string"
                },
                "upstreamSpeed": {
                    "type": "integer"
                }
            },
            "required": [
                "circuitId",
                "siteId",
                "termSide"
            ],
            "inputProperties": {
                "circuitId": {
                    "type": "integer"
                },
                "portSpeed": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "termSide": {
                    "type": "string"
                },
                "upstreamSpeed": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "circuitId",
                "siteId",
                "termSide"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CircuitTermination resources.\n",
                "properties": {
                    "circuitId": {
                        "type": "integer"
                    },
                    "portSpeed": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "termSide": {
                        "type": "string"
                    },
                    "upstreamSpeed": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/circuitType:CircuitType": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/circuits/#circuit-types):\n\n\u003e Circuits are classified by functional type. These types are completely customizable, and are typically used to convey the type of service being delivered over a circuit.\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CircuitType resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/cluster:Cluster": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/virtualization/#clusters):\n\n\u003e A cluster is a logical grouping of physical resources within which virtual machines run. A cluster must be assigned a type (technological classification), and may optionally be assigned to a cluster group, site, and/or tenant. Each cluster must have a unique name within its assigned group and/or site, if any.\n\u003e\n\u003e Physical devices may be associated with clusters as hosts. This allows users to track on which host(s) a particular virtual machine may reside. However, NetBox does not support pinning a specific VM within a cluster to a particular host device.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst dcWest = netbox.getClusterGroup({\n    name: \"dc-west\",\n});\nconst vmwVsphere = new netbox.ClusterType(\"vmwVsphere\", {});\nconst vmwCluster01 = new netbox.Cluster(\"vmwCluster01\", {\n    clusterTypeId: vmwVsphere.id,\n    clusterGroupId: dcWest.then(dcWest =\u003e dcWest.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ndc_west = netbox.get_cluster_group(name=\"dc-west\")\nvmw_vsphere = netbox.ClusterType(\"vmwVsphere\")\nvmw_cluster01 = netbox.Cluster(\"vmwCluster01\",\n    cluster_type_id=vmw_vsphere.id,\n    cluster_group_id=dc_west.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dcWest = Netbox.GetClusterGroup.Invoke(new()\n    {\n        Name = \"dc-west\",\n    });\n\n    var vmwVsphere = new Netbox.ClusterType(\"vmwVsphere\");\n\n    var vmwCluster01 = new Netbox.Cluster(\"vmwCluster01\", new()\n    {\n        ClusterTypeId = vmwVsphere.Id,\n        ClusterGroupId = dcWest.Apply(getClusterGroupResult =\u003e getClusterGroupResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdcWest, err := netbox.LookupClusterGroup(ctx, \u0026GetClusterGroupArgs{\n\t\t\tName: \"dc-west\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvmwVsphere, err := netbox.NewClusterType(ctx, \"vmwVsphere\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.NewCluster(ctx, \"vmwCluster01\", \u0026netbox.ClusterArgs{\n\t\t\tClusterTypeId:  vmwVsphere.ID(),\n\t\t\tClusterGroupId: pulumi.String(dcWest.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetClusterGroupArgs;\nimport com.pulumi.netbox.ClusterType;\nimport com.pulumi.netbox.Cluster;\nimport com.pulumi.netbox.ClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dcWest = NetboxFunctions.getClusterGroup(GetClusterGroupArgs.builder()\n            .name(\"dc-west\")\n            .build());\n\n        var vmwVsphere = new ClusterType(\"vmwVsphere\");\n\n        var vmwCluster01 = new Cluster(\"vmwCluster01\", ClusterArgs.builder()        \n            .clusterTypeId(vmwVsphere.id())\n            .clusterGroupId(dcWest.applyValue(getClusterGroupResult -\u003e getClusterGroupResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vmwVsphere:\n    type: netbox:ClusterType\n  vmwCluster01:\n    type: netbox:Cluster\n    properties:\n      clusterTypeId: ${vmwVsphere.id}\n      clusterGroupId: ${dcWest.id}\nvariables:\n  dcWest:\n    Fn::Invoke:\n      Function: netbox:getClusterGroup\n      Arguments:\n        name: dc-west\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "clusterGroupId": {
                    "type": "integer"
                },
                "clusterTypeId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "clusterTypeId",
                "name"
            ],
            "inputProperties": {
                "clusterGroupId": {
                    "type": "integer"
                },
                "clusterTypeId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "clusterTypeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "clusterGroupId": {
                        "type": "integer"
                    },
                    "clusterTypeId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/clusterGroup:ClusterGroup": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/virtualization/#cluster-groups):\n\n\u003e Cluster groups may be created for the purpose of organizing clusters. The arrangement of clusters into groups is optional.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst dcWest = new netbox.ClusterGroup(\"dc_west\", {\n    description: \"West Datacenter Cluster\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ndc_west = netbox.ClusterGroup(\"dcWest\", description=\"West Datacenter Cluster\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dcWest = new Netbox.ClusterGroup(\"dcWest\", new()\n    {\n        Description = \"West Datacenter Cluster\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewClusterGroup(ctx, \"dcWest\", \u0026netbox.ClusterGroupArgs{\n\t\t\tDescription: pulumi.String(\"West Datacenter Cluster\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.ClusterGroup;\nimport com.pulumi.netbox.ClusterGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dcWest = new ClusterGroup(\"dcWest\", ClusterGroupArgs.builder()        \n            .description(\"West Datacenter Cluster\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dcWest:\n    type: netbox:ClusterGroup\n    properties:\n      description: West Datacenter Cluster\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/clusterType:ClusterType": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/virtualization/#cluster-types):\n\n\u003e A cluster type represents a technology or mechanism by which a cluster is formed. For example, you might create a cluster type named \"VMware vSphere\" for a locally hosted cluster or \"DigitalOcean NYC3\" for one hosted by a cloud provider.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst vmwVsphere = new netbox.ClusterType(\"vmw_vsphere\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nvmw_vsphere = netbox.ClusterType(\"vmwVsphere\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vmwVsphere = new Netbox.ClusterType(\"vmwVsphere\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewClusterType(ctx, \"vmwVsphere\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.ClusterType;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vmwVsphere = new ClusterType(\"vmwVsphere\");\n\n    }\n}\n```\n```yaml\nresources:\n  vmwVsphere:\n    type: netbox:ClusterType\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterType resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/customField:CustomField": {
            "properties": {
                "choices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "contentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "validationMaximum": {
                    "type": "integer"
                },
                "validationMinimum": {
                    "type": "integer"
                },
                "validationRegex": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            },
            "required": [
                "contentTypes",
                "name",
                "type",
                "weight"
            ],
            "inputProperties": {
                "choices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "contentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "validationMaximum": {
                    "type": "integer"
                },
                "validationMinimum": {
                    "type": "integer"
                },
                "validationRegex": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "contentTypes",
                "type",
                "weight"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomField resources.\n",
                "properties": {
                    "choices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "contentTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string"
                    },
                    "validationMaximum": {
                        "type": "integer"
                    },
                    "validationMinimum": {
                        "type": "integer"
                    },
                    "validationRegex": {
                        "type": "string"
                    },
                    "weight": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/device:Device": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/devices/#devices):\n\n\u003e Every piece of hardware which is installed within a site or rack exists in NetBox as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.\n",
            "properties": {
                "comments": {
                    "type": "string"
                },
                "deviceTypeId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "primaryIpv4": {
                    "type": "integer"
                },
                "roleId": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "required": [
                "deviceTypeId",
                "name",
                "primaryIpv4"
            ],
            "inputProperties": {
                "comments": {
                    "type": "string"
                },
                "deviceTypeId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "deviceTypeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Device resources.\n",
                "properties": {
                    "comments": {
                        "type": "string"
                    },
                    "deviceTypeId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "primaryIpv4": {
                        "type": "integer"
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "serial": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/deviceRole:DeviceRole": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/devices/#device-roles):\n\n\u003e Devices can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for core switches, distribution switches, and access switches within your network.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst coreSw = new netbox.DeviceRole(\"core_sw\", {\n    colorHex: \"FF00FF\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncore_sw = netbox.DeviceRole(\"coreSw\", color_hex=\"FF00FF\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var coreSw = new Netbox.DeviceRole(\"coreSw\", new()\n    {\n        ColorHex = \"FF00FF\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewDeviceRole(ctx, \"coreSw\", \u0026netbox.DeviceRoleArgs{\n\t\t\tColorHex: pulumi.String(\"FF00FF\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.DeviceRole;\nimport com.pulumi.netbox.DeviceRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var coreSw = new DeviceRole(\"coreSw\", DeviceRoleArgs.builder()        \n            .colorHex(\"FF00FF\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  coreSw:\n    type: netbox:DeviceRole\n    properties:\n      colorHex: FF00FF\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "colorHex": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "vmRole": {
                    "type": "boolean"
                }
            },
            "required": [
                "colorHex",
                "name",
                "slug"
            ],
            "inputProperties": {
                "colorHex": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "vmRole": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "colorHex"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceRole resources.\n",
                "properties": {
                    "colorHex": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "vmRole": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/deviceType:DeviceType": {
            "properties": {
                "manufacturerId": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "partNumber": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "model",
                "slug"
            ],
            "inputProperties": {
                "manufacturerId": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "partNumber": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "model"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceType resources.\n",
                "properties": {
                    "manufacturerId": {
                        "type": "integer"
                    },
                    "model": {
                        "type": "string"
                    },
                    "partNumber": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/interface:Interface": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "macAddress": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "mtu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "taggedVlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "This attribute is not supported by netbox any longer. It will be removed in future versions of this provider."
                },
                "untaggedVlan": {
                    "type": "integer"
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "required": [
                "name",
                "virtualMachineId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "macAddress": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "mode": {
                    "type": "string"
                },
                "mtu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "taggedVlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "This attribute is not supported by netbox any longer. It will be removed in future versions of this provider."
                },
                "untaggedVlan": {
                    "type": "integer"
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "virtualMachineId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Interface resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "macAddress": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "mode": {
                        "type": "string"
                    },
                    "mtu": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "taggedVlans": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string",
                        "deprecationMessage": "This attribute is not supported by netbox any longer. It will be removed in future versions of this provider."
                    },
                    "untaggedVlan": {
                        "type": "integer"
                    },
                    "virtualMachineId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/ipAddress:IpAddress": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/ipam/#ip-addresses):\n\n\u003e An IP address comprises a single host address (either IPv4 or IPv6) and its subnet mask. Its mask should match exactly how the IP address is configured on an interface in the real world.\n\u003e\n\u003e Like a prefix, an IP address can optionally be assigned to a VRF (otherwise, it will appear in the \"global\" table). IP addresses are automatically arranged under parent prefixes within their respective VRFs according to the IP hierarchy.\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "dnsName": {
                    "type": "string"
                },
                "interfaceId": {
                    "type": "integer"
                },
                "ipAddress": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "required": [
                "ipAddress",
                "status"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "dnsName": {
                    "type": "string"
                },
                "interfaceId": {
                    "type": "integer"
                },
                "ipAddress": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "ipAddress",
                "status"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpAddress resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "dnsName": {
                        "type": "string"
                    },
                    "interfaceId": {
                        "type": "integer"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/ipRange:IpRange": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/ipam/#ip-ranges):\n\n\u003e This model represents an arbitrary range of individual IPv4 or IPv6 addresses, inclusive of its starting and ending addresses. For instance, the range 192.0.2.10 to 192.0.2.20 has eleven members. (The total member count is available as the size property on an IPRange instance.) Like prefixes and IP addresses, each IP range may optionally be assigned to a VRF and/or tenant.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst custAProd = new netbox.IpRange(\"cust_a_prod\", {\n    endAddress: \"10.0.0.50/24\",\n    startAddress: \"10.0.0.1/24\",\n    tags: [\n        \"customer-a\",\n        \"prod\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncust_a_prod = netbox.IpRange(\"custAProd\",\n    end_address=\"10.0.0.50/24\",\n    start_address=\"10.0.0.1/24\",\n    tags=[\n        \"customer-a\",\n        \"prod\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var custAProd = new Netbox.IpRange(\"custAProd\", new()\n    {\n        EndAddress = \"10.0.0.50/24\",\n        StartAddress = \"10.0.0.1/24\",\n        Tags = new[]\n        {\n            \"customer-a\",\n            \"prod\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewIpRange(ctx, \"custAProd\", \u0026netbox.IpRangeArgs{\n\t\t\tEndAddress:   pulumi.String(\"10.0.0.50/24\"),\n\t\t\tStartAddress: pulumi.String(\"10.0.0.1/24\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"customer-a\"),\n\t\t\t\tpulumi.String(\"prod\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.IpRange;\nimport com.pulumi.netbox.IpRangeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var custAProd = new IpRange(\"custAProd\", IpRangeArgs.builder()        \n            .endAddress(\"10.0.0.50/24\")\n            .startAddress(\"10.0.0.1/24\")\n            .tags(            \n                \"customer-a\",\n                \"prod\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  custAProd:\n    type: netbox:IpRange\n    properties:\n      endAddress: 10.0.0.50/24\n      startAddress: 10.0.0.1/24\n      tags:\n        - customer-a\n        - prod\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string"
                },
                "endAddress": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "startAddress": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "required": [
                "endAddress",
                "startAddress"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "endAddress": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "startAddress": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "endAddress",
                "startAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpRange resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "endAddress": {
                        "type": "string"
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "startAddress": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/ipamRole:IpamRole": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpamRole resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "weight": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/manufacturer:Manufacturer": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Manufacturer resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/platform:Platform": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/devices/#platforms):\n\n\u003e A platform defines the type of software running on a device or virtual machine. This can be helpful to model when it is necessary to distinguish between different versions or feature sets. Note that two devices of the same type may be assigned different platforms: For example, one Juniper MX240 might run Junos 14 while another runs Junos 15.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\n// Resource for PanOS (e.g. Panorama from Palo Alto)\nconst pANOS = new netbox.Platform(\"PANOS\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Resource for PanOS (e.g. Panorama from Palo Alto)\np_anos = netbox.Platform(\"pANOS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Resource for PanOS (e.g. Panorama from Palo Alto)\n    var pANOS = new Netbox.Platform(\"pANOS\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewPlatform(ctx, \"pANOS\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Platform;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pANOS = new Platform(\"pANOS\");\n\n    }\n}\n```\n```yaml\nresources:\n  # Resource for PanOS (e.g. Panorama from Palo Alto)\n  pANOS:\n    type: netbox:Platform\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Platform resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/prefix:Prefix": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/ipam/#prefixes):\n\n\u003e A prefix is an IPv4 or IPv6 network and mask expressed in CIDR notation (e.g. 192.0.2.0/24). A prefix entails only the \"network portion\" of an IP address: All bits in the address not covered by the mask must be zero. (In other words, a prefix cannot be a specific IP address.)\n\u003e\n\u003e Prefixes are automatically organized by their parent aggregates. Additionally, each prefix can be assigned to a particular site and virtual routing and forwarding instance (VRF). Each VRF represents a separate IP space or routing table. All prefixes not assigned to a VRF are considered to be in the \"global\" table.\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "isPool": {
                    "type": "boolean"
                },
                "markUtilized": {
                    "type": "boolean"
                },
                "prefix": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vlanId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "required": [
                "prefix",
                "status"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "isPool": {
                    "type": "boolean"
                },
                "markUtilized": {
                    "type": "boolean"
                },
                "prefix": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vlanId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "prefix",
                "status"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Prefix resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "isPool": {
                        "type": "boolean"
                    },
                    "markUtilized": {
                        "type": "boolean"
                    },
                    "prefix": {
                        "type": "string"
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "vlanId": {
                        "type": "integer"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/primaryIp:PrimaryIp": {
            "description": "This resource is used to define the primary IP for a given virtual machine. The primary IP is reflected in the Virtual machine Netbox UI, which identifies the Primary IPv4 and IPv6 addresses.\n",
            "properties": {
                "ipAddressId": {
                    "type": "integer"
                },
                "ipAddressVersion": {
                    "type": "integer"
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "required": [
                "ipAddressId",
                "virtualMachineId"
            ],
            "inputProperties": {
                "ipAddressId": {
                    "type": "integer"
                },
                "ipAddressVersion": {
                    "type": "integer"
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "ipAddressId",
                "virtualMachineId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrimaryIp resources.\n",
                "properties": {
                    "ipAddressId": {
                        "type": "integer"
                    },
                    "ipAddressVersion": {
                        "type": "integer"
                    },
                    "virtualMachineId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/region:Region": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentRegionId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentRegionId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Region resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentRegionId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/rir:Rir": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rir resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/service:Service": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/services/#services):\n\n\u003e A service represents a layer four TCP or UDP service available on a device or virtual machine. For example, you might want to document that an HTTP service is running on a device. Each service includes a name, protocol, and port number; for example, \"SSH (TCP/22)\" or \"DNS (UDP/53).\"\n\u003e\n\u003e A service may optionally be bound to one or more specific IP addresses belonging to its parent device or VM. (If no IP addresses are bound, the service is assumed to be reachable via any assigned IP address.\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "deprecationMessage": "This field is deprecated. Please use the new \"ports\" attribute instead."
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "protocol": {
                    "type": "string"
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "required": [
                "name",
                "protocol",
                "virtualMachineId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "deprecationMessage": "This field is deprecated. Please use the new \"ports\" attribute instead."
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "protocol": {
                    "type": "string"
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "protocol",
                "virtualMachineId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer",
                        "deprecationMessage": "This field is deprecated. Please use the new \"ports\" attribute instead."
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "protocol": {
                        "type": "string"
                    },
                    "virtualMachineId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/site:Site": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst example1 = new netbox.Site(\"example1\", {\n    asn: 1337,\n    facility: \"Data center\",\n    latitude: -45.4085,\n    longitude: 30.1496,\n    status: \"staging\",\n    timezone: \"Africa/Johannesburg\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nexample1 = netbox.Site(\"example1\",\n    asn=1337,\n    facility=\"Data center\",\n    latitude=-45.4085,\n    longitude=30.1496,\n    status=\"staging\",\n    timezone=\"Africa/Johannesburg\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = new Netbox.Site(\"example1\", new()\n    {\n        Asn = 1337,\n        Facility = \"Data center\",\n        Latitude = -45.4085,\n        Longitude = 30.1496,\n        Status = \"staging\",\n        Timezone = \"Africa/Johannesburg\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewSite(ctx, \"example1\", \u0026netbox.SiteArgs{\n\t\t\tAsn:       pulumi.Int(1337),\n\t\t\tFacility:  pulumi.String(\"Data center\"),\n\t\t\tLatitude:  pulumi.Float64(-45.4085),\n\t\t\tLongitude: pulumi.Float64(30.1496),\n\t\t\tStatus:    pulumi.String(\"staging\"),\n\t\t\tTimezone:  pulumi.String(\"Africa/Johannesburg\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Site;\nimport com.pulumi.netbox.SiteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example1 = new Site(\"example1\", SiteArgs.builder()        \n            .asn(1337)\n            .facility(\"Data center\")\n            .latitude(\"-45.4085\")\n            .longitude(\"30.1496\")\n            .status(\"staging\")\n            .timezone(\"Africa/Johannesburg\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example1:\n    type: netbox:Site\n    properties:\n      asn: 1337\n      facility: Data center\n      latitude: -45.4085\n      longitude: 30.1496\n      status: staging\n      timezone: Africa/Johannesburg\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "asn": {
                    "type": "integer"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "facility": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "regionId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "asn": {
                    "type": "integer"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "facility": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "regionId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Site resources.\n",
                "properties": {
                    "asn": {
                        "type": "integer"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "facility": {
                        "type": "string"
                    },
                    "latitude": {
                        "type": "number"
                    },
                    "longitude": {
                        "type": "number"
                    },
                    "name": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/tag:Tag": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst dmz = new netbox.Tag(\"dmz\", {\n    colorHex: \"ff00ff\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ndmz = netbox.Tag(\"dmz\", color_hex=\"ff00ff\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dmz = new Netbox.Tag(\"dmz\", new()\n    {\n        ColorHex = \"ff00ff\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewTag(ctx, \"dmz\", \u0026netbox.TagArgs{\n\t\t\tColorHex: pulumi.String(\"ff00ff\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Tag;\nimport com.pulumi.netbox.TagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dmz = new Tag(\"dmz\", TagArgs.builder()        \n            .colorHex(\"ff00ff\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dmz:\n    type: netbox:Tag\n    properties:\n      colorHex: ff00ff\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "colorHex": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "colorHex": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "colorHex": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/tenant:Tenant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst customerA = new netbox.Tenant(\"customer_a\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncustomer_a = netbox.Tenant(\"customerA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var customerA = new Netbox.Tenant(\"customerA\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewTenant(ctx, \"customerA\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Tenant;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var customerA = new Tenant(\"customerA\");\n\n    }\n}\n```\n```yaml\nresources:\n  customerA:\n    type: netbox:Tenant\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "groupId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tenant resources.\n",
                "properties": {
                    "groupId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/tenantGroup:TenantGroup": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TenantGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/token:Token": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            },
            "required": [
                "userId"
            ],
            "inputProperties": {
                "key": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Token resources.\n",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/user:User": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string"
                },
                "staff": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "password",
                "username"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string"
                },
                "staff": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "password": {
                        "type": "string"
                    },
                    "staff": {
                        "type": "boolean"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/virtualMachine:VirtualMachine": {
            "properties": {
                "clusterId": {
                    "type": "integer"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "diskSizeGb": {
                    "type": "integer"
                },
                "memoryMb": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "platformId": {
                    "type": "integer"
                },
                "primaryIpv4": {
                    "type": "integer"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vcpus": {
                    "type": "number"
                }
            },
            "required": [
                "clusterId",
                "name",
                "primaryIpv4",
                "siteId"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "integer"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "diskSizeGb": {
                    "type": "integer"
                },
                "memoryMb": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "platformId": {
                    "type": "integer"
                },
                "roleId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vcpus": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualMachine resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "integer"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "diskSizeGb": {
                        "type": "integer"
                    },
                    "memoryMb": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "platformId": {
                        "type": "integer"
                    },
                    "primaryIpv4": {
                        "type": "integer"
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "vcpus": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/vlan:Vlan": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst example1 = new netbox.Vlan(\"example1\", {\n    vid: 1777,\n    tags: [],\n});\n// Assume netbox_tenant, netbox_site, and netbox_tag resources exist\nconst example2 = new netbox.Vlan(\"example2\", {\n    vid: 1778,\n    status: \"reserved\",\n    description: \"Reserved example VLAN\",\n    tenantId: netbox_tenant.ex.id,\n    siteId: netbox_site.ex.id,\n    tags: [netbox_tag.ex.name],\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nexample1 = netbox.Vlan(\"example1\",\n    vid=1777,\n    tags=[])\n# Assume netbox_tenant, netbox_site, and netbox_tag resources exist\nexample2 = netbox.Vlan(\"example2\",\n    vid=1778,\n    status=\"reserved\",\n    description=\"Reserved example VLAN\",\n    tenant_id=netbox_tenant[\"ex\"][\"id\"],\n    site_id=netbox_site[\"ex\"][\"id\"],\n    tags=[netbox_tag[\"ex\"][\"name\"]])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = new Netbox.Vlan(\"example1\", new()\n    {\n        Vid = 1777,\n        Tags = new[] {},\n    });\n\n    // Assume netbox_tenant, netbox_site, and netbox_tag resources exist\n    var example2 = new Netbox.Vlan(\"example2\", new()\n    {\n        Vid = 1778,\n        Status = \"reserved\",\n        Description = \"Reserved example VLAN\",\n        TenantId = netbox_tenant.Ex.Id,\n        SiteId = netbox_site.Ex.Id,\n        Tags = new[]\n        {\n            netbox_tag.Ex.Name,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewVlan(ctx, \"example1\", \u0026netbox.VlanArgs{\n\t\t\tVid:  pulumi.Int(1777),\n\t\t\tTags: pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.NewVlan(ctx, \"example2\", \u0026netbox.VlanArgs{\n\t\t\tVid:         pulumi.Int(1778),\n\t\t\tStatus:      pulumi.String(\"reserved\"),\n\t\t\tDescription: pulumi.String(\"Reserved example VLAN\"),\n\t\t\tTenantId:    pulumi.Any(netbox_tenant.Ex.Id),\n\t\t\tSiteId:      pulumi.Any(netbox_site.Ex.Id),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.Any(netbox_tag.Ex.Name),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Vlan;\nimport com.pulumi.netbox.VlanArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example1 = new Vlan(\"example1\", VlanArgs.builder()        \n            .vid(1777)\n            .tags()\n            .build());\n\n        var example2 = new Vlan(\"example2\", VlanArgs.builder()        \n            .vid(1778)\n            .status(\"reserved\")\n            .description(\"Reserved example VLAN\")\n            .tenantId(netbox_tenant.ex().id())\n            .siteId(netbox_site.ex().id())\n            .tags(netbox_tag.ex().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example1:\n    type: netbox:Vlan\n    properties:\n      vid: 1777\n      tags: []\n  # Assume netbox_tenant, netbox_site, and netbox_tag resources exist\n  example2:\n    type: netbox:Vlan\n    properties:\n      vid: 1778\n      status: reserved\n      description: Reserved example VLAN\n      tenantId: ${netbox_tenant.ex.id}\n      siteId: ${netbox_site.ex.id}\n      tags:\n        - ${netbox_tag.ex.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vid": {
                    "type": "integer"
                }
            },
            "required": [
                "name",
                "tags",
                "vid"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vid": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "tags",
                "vid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vlan resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "vid": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/vrf:Vrf": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst custAProd = new netbox.Vrf(\"cust_a_prod\", {\n    tags: [\n        \"customer-a\",\n        \"prod\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncust_a_prod = netbox.Vrf(\"custAProd\", tags=[\n    \"customer-a\",\n    \"prod\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var custAProd = new Netbox.Vrf(\"custAProd\", new()\n    {\n        Tags = new[]\n        {\n            \"customer-a\",\n            \"prod\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewVrf(ctx, \"custAProd\", \u0026netbox.VrfArgs{\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"customer-a\"),\n\t\t\t\tpulumi.String(\"prod\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Vrf;\nimport com.pulumi.netbox.VrfArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var custAProd = new Vrf(\"custAProd\", VrfArgs.builder()        \n            .tags(            \n                \"customer-a\",\n                \"prod\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  custAProd:\n    type: netbox:Vrf\n    properties:\n      tags:\n        - customer-a\n        - prod\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vrf resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "netbox:index/getCluster:getCluster": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst vmwCluster01 = pulumi.output(netbox.getCluster({\n    name: \"vmw-cluster-01\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nvmw_cluster01 = netbox.get_cluster(name=\"vmw-cluster-01\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vmwCluster01 = Netbox.GetCluster.Invoke(new()\n    {\n        Name = \"vmw-cluster-01\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupCluster(ctx, \u0026GetClusterArgs{\n\t\t\tName: \"vmw-cluster-01\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var vmwCluster01 = NetboxFunctions.getCluster(GetClusterArgs.builder()\n            .name(\"vmw-cluster-01\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  vmwCluster01:\n    Fn::Invoke:\n      Function: netbox:getCluster\n      Arguments:\n        name: vmw-cluster-01\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCluster.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name",
                    "id"
                ]
            }
        },
        "netbox:index/getClusterGroup:getClusterGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst dcWest = pulumi.output(netbox.getClusterGroup({\n    name: \"dc-west\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ndc_west = netbox.get_cluster_group(name=\"dc-west\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dcWest = Netbox.GetClusterGroup.Invoke(new()\n    {\n        Name = \"dc-west\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupClusterGroup(ctx, \u0026GetClusterGroupArgs{\n\t\t\tName: \"dc-west\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetClusterGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dcWest = NetboxFunctions.getClusterGroup(GetClusterGroupArgs.builder()\n            .name(\"dc-west\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dcWest:\n    Fn::Invoke:\n      Function: netbox:getClusterGroup\n      Arguments:\n        name: dc-west\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getClusterGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterGroup.\n",
                "properties": {
                    "clusterGroupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterGroupId",
                    "name",
                    "id"
                ]
            }
        },
        "netbox:index/getClusterType:getClusterType": {
            "inputs": {
                "description": "A collection of arguments for invoking getClusterType.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterType.\n",
                "properties": {
                    "clusterTypeId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterTypeId",
                    "name",
                    "id"
                ]
            }
        },
        "netbox:index/getDeviceRole:getDeviceRole": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst coreSw = pulumi.output(netbox.getDeviceRole({\n    name: \"core-sw\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncore_sw = netbox.get_device_role(name=\"core-sw\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var coreSw = Netbox.GetDeviceRole.Invoke(new()\n    {\n        Name = \"core-sw\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupDeviceRole(ctx, \u0026GetDeviceRoleArgs{\n\t\t\tName: \"core-sw\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetDeviceRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var coreSw = NetboxFunctions.getDeviceRole(GetDeviceRoleArgs.builder()\n            .name(\"core-sw\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  coreSw:\n    Fn::Invoke:\n      Function: netbox:getDeviceRole\n      Arguments:\n        name: core-sw\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDeviceRole.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeviceRole.\n",
                "properties": {
                    "colorHex": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "colorHex",
                    "name",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:index/getDeviceType:getDeviceType": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\n// Get device type by model name\nconst ex1 = pulumi.output(netbox.getDeviceType({\n    model: \"7210 SAS-Sx 10/100GE\",\n}));\n// Get device type by slug\nconst ex2 = pulumi.output(netbox.getDeviceType({\n    slug: \"7210-sas-sx-10-100GE\",\n}));\n// Get device type by manufacturer and part number information\nconst ex3 = pulumi.output(netbox.getDeviceType({\n    manufacturer: \"Nokia\",\n    partNumber: \"3HE11597AARB01\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nex1 = netbox.get_device_type(model=\"7210 SAS-Sx 10/100GE\")\nex2 = netbox.get_device_type(slug=\"7210-sas-sx-10-100GE\")\nex3 = netbox.get_device_type(manufacturer=\"Nokia\",\n    part_number=\"3HE11597AARB01\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ex1 = Netbox.GetDeviceType.Invoke(new()\n    {\n        Model = \"7210 SAS-Sx 10/100GE\",\n    });\n\n    var ex2 = Netbox.GetDeviceType.Invoke(new()\n    {\n        Slug = \"7210-sas-sx-10-100GE\",\n    });\n\n    var ex3 = Netbox.GetDeviceType.Invoke(new()\n    {\n        Manufacturer = \"Nokia\",\n        PartNumber = \"3HE11597AARB01\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupDeviceType(ctx, \u0026GetDeviceTypeArgs{\n\t\t\tModel: pulumi.StringRef(\"7210 SAS-Sx 10/100GE\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.LookupDeviceType(ctx, \u0026GetDeviceTypeArgs{\n\t\t\tSlug: pulumi.StringRef(\"7210-sas-sx-10-100GE\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.LookupDeviceType(ctx, \u0026GetDeviceTypeArgs{\n\t\t\tManufacturer: pulumi.StringRef(\"Nokia\"),\n\t\t\tPartNumber:   pulumi.StringRef(\"3HE11597AARB01\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetDeviceTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ex1 = NetboxFunctions.getDeviceType(GetDeviceTypeArgs.builder()\n            .model(\"7210 SAS-Sx 10/100GE\")\n            .build());\n\n        final var ex2 = NetboxFunctions.getDeviceType(GetDeviceTypeArgs.builder()\n            .slug(\"7210-sas-sx-10-100GE\")\n            .build());\n\n        final var ex3 = NetboxFunctions.getDeviceType(GetDeviceTypeArgs.builder()\n            .manufacturer(\"Nokia\")\n            .partNumber(\"3HE11597AARB01\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ex1:\n    Fn::Invoke:\n      Function: netbox:getDeviceType\n      Arguments:\n        model: 7210 SAS-Sx 10/100GE\n  ex2:\n    Fn::Invoke:\n      Function: netbox:getDeviceType\n      Arguments:\n        slug: 7210-sas-sx-10-100GE\n  ex3:\n    Fn::Invoke:\n      Function: netbox:getDeviceType\n      Arguments:\n        manufacturer: Nokia\n        partNumber: 3HE11597AARB01\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDeviceType.\n",
                "properties": {
                    "manufacturer": {
                        "type": "string"
                    },
                    "model": {
                        "type": "string"
                    },
                    "partNumber": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDeviceType.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isFullDepth": {
                        "type": "boolean"
                    },
                    "manufacturer": {
                        "type": "string"
                    },
                    "manufacturerId": {
                        "type": "integer"
                    },
                    "model": {
                        "type": "string"
                    },
                    "partNumber": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "uHeight": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "isFullDepth",
                    "manufacturerId",
                    "uHeight",
                    "id"
                ]
            }
        },
        "netbox:index/getInterfaces:getInterfaces": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst myvmEth0 = pulumi.output(netbox.Interface({\n    filter: [{\n        name: \"name\",\n        value: \"myvm\",\n    }],\n    nameRegex: \"eth0\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInterfaces.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getInterfacesFilter:getInterfacesFilter"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInterfaces.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getInterfacesFilter:getInterfacesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "interfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getInterfacesInterface:getInterfacesInterface"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "interfaces",
                    "id"
                ]
            }
        },
        "netbox:index/getIpAddresses:getIpAddresses": {
            "inputs": {
                "description": "A collection of arguments for invoking getIpAddresses.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getIpAddressesFilter:getIpAddressesFilter"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIpAddresses.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getIpAddressesFilter:getIpAddressesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getIpAddressesIpAddress:getIpAddressesIpAddress"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "ipAddresses",
                    "id"
                ]
            }
        },
        "netbox:index/getIpRange:getIpRange": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst custAProd = pulumi.output(netbox.getIpRange({\n    contains: \"10.0.0.1/24\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncust_a_prod = netbox.get_ip_range(contains=\"10.0.0.1/24\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var custAProd = Netbox.GetIpRange.Invoke(new()\n    {\n        Contains = \"10.0.0.1/24\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupIpRange(ctx, \u0026GetIpRangeArgs{\n\t\t\tContains: \"10.0.0.1/24\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetIpRangeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var custAProd = NetboxFunctions.getIpRange(GetIpRangeArgs.builder()\n            .contains(\"10.0.0.1/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  custAProd:\n    Fn::Invoke:\n      Function: netbox:getIpRange\n      Arguments:\n        contains: 10.0.0.1/24\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIpRange.\n",
                "properties": {
                    "contains": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "contains"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIpRange.\n",
                "properties": {
                    "contains": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "contains",
                    "id"
                ]
            }
        },
        "netbox:index/getPlatform:getPlatform": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst pANOS = pulumi.output(netbox.getPlatform({\n    name: \"PANOS\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\np_anos = netbox.get_platform(name=\"PANOS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pANOS = Netbox.GetPlatform.Invoke(new()\n    {\n        Name = \"PANOS\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupPlatform(ctx, \u0026GetPlatformArgs{\n\t\t\tName: \"PANOS\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetPlatformArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var pANOS = NetboxFunctions.getPlatform(GetPlatformArgs.builder()\n            .name(\"PANOS\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  pANOS:\n    Fn::Invoke:\n      Function: netbox:getPlatform\n      Arguments:\n        name: PANOS\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPlatform.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlatform.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:index/getPrefix:getPrefix": {
            "inputs": {
                "description": "A collection of arguments for invoking getPrefix.\n",
                "properties": {
                    "cidr": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cidr"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrefix.\n",
                "properties": {
                    "cidr": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cidr",
                    "id"
                ]
            }
        },
        "netbox:index/getRegion:getRegion": {
            "inputs": {
                "description": "A collection of arguments for invoking getRegion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getRegionFilter:getRegionFilter"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegion.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getRegionFilter:getRegionFilter"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentRegionId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "name",
                    "parentRegionId",
                    "slug"
                ]
            }
        },
        "netbox:index/getSite:getSite": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst getByName = pulumi.output(netbox.getSite({\n    name: \"Example Site 1\",\n}));\nconst getBySlug = pulumi.output(netbox.getSite({\n    slug: \"example-site-1\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nget_by_name = netbox.get_site(name=\"Example Site 1\")\nget_by_slug = netbox.get_site(slug=\"example-site-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var getByName = Netbox.GetSite.Invoke(new()\n    {\n        Name = \"Example Site 1\",\n    });\n\n    var getBySlug = Netbox.GetSite.Invoke(new()\n    {\n        Slug = \"example-site-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupSite(ctx, \u0026GetSiteArgs{\n\t\t\tName: pulumi.StringRef(\"Example Site 1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.LookupSite(ctx, \u0026GetSiteArgs{\n\t\t\tSlug: pulumi.StringRef(\"example-site-1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetSiteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var getByName = NetboxFunctions.getSite(GetSiteArgs.builder()\n            .name(\"Example Site 1\")\n            .build());\n\n        final var getBySlug = NetboxFunctions.getSite(GetSiteArgs.builder()\n            .slug(\"example-site-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  getByName:\n    Fn::Invoke:\n      Function: netbox:getSite\n      Arguments:\n        name: Example Site 1\n  getBySlug:\n    Fn::Invoke:\n      Function: netbox:getSite\n      Arguments:\n        slug: example-site-1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSite.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSite.\n",
                "properties": {
                    "asn": {
                        "type": "integer"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "timeZone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "asn",
                    "comments",
                    "description",
                    "groupId",
                    "regionId",
                    "siteId",
                    "status",
                    "tenantId",
                    "timeZone",
                    "id"
                ]
            }
        },
        "netbox:index/getTag:getTag": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst dmz = pulumi.output(netbox.getTag({\n    name: \"DMZ\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ndmz = netbox.get_tag(name=\"DMZ\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dmz = Netbox.GetTag.Invoke(new()\n    {\n        Name = \"DMZ\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupTag(ctx, \u0026GetTagArgs{\n\t\t\tName: \"DMZ\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dmz = NetboxFunctions.getTag(GetTagArgs.builder()\n            .name(\"DMZ\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dmz:\n    Fn::Invoke:\n      Function: netbox:getTag\n      Arguments:\n        name: DMZ\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTag.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTag.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:index/getTenant:getTenant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst customerA = pulumi.output(netbox.getTenant({\n    name: \"Customer A\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncustomer_a = netbox.get_tenant(name=\"Customer A\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var customerA = Netbox.GetTenant.Invoke(new()\n    {\n        Name = \"Customer A\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupTenant(ctx, \u0026GetTenantArgs{\n\t\t\tName: \"Customer A\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetTenantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var customerA = NetboxFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"Customer A\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  customerA:\n    Fn::Invoke:\n      Function: netbox:getTenant\n      Arguments:\n        name: Customer A\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTenant.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenant.\n",
                "properties": {
                    "groupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "groupId",
                    "name",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:index/getTenantGroup:getTenantGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenantGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTenantGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "parentId",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:index/getTenants:getTenants": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenants.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getTenantsFilter:getTenantsFilter"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTenants.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getTenantsFilter:getTenantsFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getTenantsTenant:getTenantsTenant"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "tenants",
                    "id"
                ]
            }
        },
        "netbox:index/getVirtualMachines:getVirtualMachines": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst vmwCluster01 = netbox.getCluster({\n    name: \"vmw-cluster-01\",\n});\nconst baseVm = vmwCluster01.then(vmwCluster01 =\u003e netbox.getVirtualMachines({\n    nameRegex: \"myvm-1\",\n    filters: [{\n        name: \"cluster_id\",\n        value: vmwCluster01.id,\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nvmw_cluster01 = netbox.get_cluster(name=\"vmw-cluster-01\")\nbase_vm = netbox.get_virtual_machines(name_regex=\"myvm-1\",\n    filters=[netbox.GetVirtualMachinesFilterArgs(\n        name=\"cluster_id\",\n        value=vmw_cluster01.id,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vmwCluster01 = Netbox.GetCluster.Invoke(new()\n    {\n        Name = \"vmw-cluster-01\",\n    });\n\n    var baseVm = Netbox.GetVirtualMachines.Invoke(new()\n    {\n        NameRegex = \"myvm-1\",\n        Filters = new[]\n        {\n            new Netbox.Inputs.GetVirtualMachinesFilterInputArgs\n            {\n                Name = \"cluster_id\",\n                Value = vmwCluster01.Apply(getClusterResult =\u003e getClusterResult.Id),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvmwCluster01, err := netbox.LookupCluster(ctx, \u0026GetClusterArgs{\n\t\t\tName: \"vmw-cluster-01\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.GetVirtualMachines(ctx, \u0026GetVirtualMachinesArgs{\n\t\t\tNameRegex: pulumi.StringRef(\"myvm-1\"),\n\t\t\tFilters: []GetVirtualMachinesFilter{\n\t\t\t\tGetVirtualMachinesFilter{\n\t\t\t\t\tName:  \"cluster_id\",\n\t\t\t\t\tValue: vmwCluster01.Id,\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetClusterArgs;\nimport com.pulumi.netbox.inputs.GetVirtualMachinesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var vmwCluster01 = NetboxFunctions.getCluster(GetClusterArgs.builder()\n            .name(\"vmw-cluster-01\")\n            .build());\n\n        final var baseVm = NetboxFunctions.getVirtualMachines(GetVirtualMachinesArgs.builder()\n            .nameRegex(\"myvm-1\")\n            .filters(GetVirtualMachinesFilterArgs.builder()\n                .name(\"cluster_id\")\n                .value(vmwCluster01.applyValue(getClusterResult -\u003e getClusterResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  vmwCluster01:\n    Fn::Invoke:\n      Function: netbox:getCluster\n      Arguments:\n        name: vmw-cluster-01\n  baseVm:\n    Fn::Invoke:\n      Function: netbox:getVirtualMachines\n      Arguments:\n        nameRegex: myvm-1\n        filters:\n          - name: cluster_id\n            value: ${vmwCluster01.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVirtualMachines.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getVirtualMachinesFilter:getVirtualMachinesFilter"
                        }
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "nameRegex": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVirtualMachines.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getVirtualMachinesFilter:getVirtualMachinesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "vms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getVirtualMachinesVm:getVirtualMachinesVm"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vms",
                    "id"
                ]
            }
        },
        "netbox:index/getVlan:getVlan": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\n// Get VLAN by name\nconst vlan1 = pulumi.output(netbox.getVlan({\n    name: \"vlan-1\",\n}));\n// Get VLAN by VLAN ID\nconst vlan2 = pulumi.output(netbox.getVlan({\n    vid: 1234,\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nvlan1 = netbox.get_vlan(name=\"vlan-1\")\nvlan2 = netbox.get_vlan(vid=1234)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vlan1 = Netbox.GetVlan.Invoke(new()\n    {\n        Name = \"vlan-1\",\n    });\n\n    var vlan2 = Netbox.GetVlan.Invoke(new()\n    {\n        Vid = 1234,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupVlan(ctx, \u0026GetVlanArgs{\n\t\t\tName: pulumi.StringRef(\"vlan-1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.LookupVlan(ctx, \u0026GetVlanArgs{\n\t\t\tVid: pulumi.IntRef(1234),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetVlanArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var vlan1 = NetboxFunctions.getVlan(GetVlanArgs.builder()\n            .name(\"vlan-1\")\n            .build());\n\n        final var vlan2 = NetboxFunctions.getVlan(GetVlanArgs.builder()\n            .vid(1234)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  vlan1:\n    Fn::Invoke:\n      Function: netbox:getVlan\n      Arguments:\n        name: vlan-1\n  vlan2:\n    Fn::Invoke:\n      Function: netbox:getVlan\n      Arguments:\n        vid: 1234\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVlan.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "vid": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVlan.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "role": {
                        "type": "integer"
                    },
                    "site": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tenant": {
                        "type": "integer"
                    },
                    "vid": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "role",
                    "site",
                    "status",
                    "tenant",
                    "id"
                ]
            }
        },
        "netbox:index/getVrf:getVrf": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst custAProd = pulumi.output(netbox.getVrf({\n    name: \"cust-a-prod\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncust_a_prod = netbox.get_vrf(name=\"cust-a-prod\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var custAProd = Netbox.GetVrf.Invoke(new()\n    {\n        Name = \"cust-a-prod\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/hbjydev/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupVrf(ctx, \u0026GetVrfArgs{\n\t\t\tName: \"cust-a-prod\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetVrfArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var custAProd = NetboxFunctions.getVrf(GetVrfArgs.builder()\n            .name(\"cust-a-prod\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  custAProd:\n    Fn::Invoke:\n      Function: netbox:getVrf\n      Arguments:\n        name: cust-a-prod\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVrf.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVrf.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        }
    }
}