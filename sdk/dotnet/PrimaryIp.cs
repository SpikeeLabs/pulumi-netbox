// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace HBJYDev.Netbox
{
    /// <summary>
    /// This resource is used to define the primary IP for a given virtual machine. The primary IP is reflected in the Virtual machine Netbox UI, which identifies the Primary IPv4 and IPv6 addresses.
    /// </summary>
    [NetboxResourceType("netbox:index/primaryIp:PrimaryIp")]
    public partial class PrimaryIp : global::Pulumi.CustomResource
    {
        [Output("ipAddressId")]
        public Output<int> IpAddressId { get; private set; } = null!;

        [Output("ipAddressVersion")]
        public Output<int?> IpAddressVersion { get; private set; } = null!;

        [Output("virtualMachineId")]
        public Output<int> VirtualMachineId { get; private set; } = null!;


        /// <summary>
        /// Create a PrimaryIp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PrimaryIp(string name, PrimaryIpArgs args, CustomResourceOptions? options = null)
            : base("netbox:index/primaryIp:PrimaryIp", name, args ?? new PrimaryIpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PrimaryIp(string name, Input<string> id, PrimaryIpState? state = null, CustomResourceOptions? options = null)
            : base("netbox:index/primaryIp:PrimaryIp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PrimaryIp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PrimaryIp Get(string name, Input<string> id, PrimaryIpState? state = null, CustomResourceOptions? options = null)
        {
            return new PrimaryIp(name, id, state, options);
        }
    }

    public sealed class PrimaryIpArgs : global::Pulumi.ResourceArgs
    {
        [Input("ipAddressId", required: true)]
        public Input<int> IpAddressId { get; set; } = null!;

        [Input("ipAddressVersion")]
        public Input<int>? IpAddressVersion { get; set; }

        [Input("virtualMachineId", required: true)]
        public Input<int> VirtualMachineId { get; set; } = null!;

        public PrimaryIpArgs()
        {
        }
        public static new PrimaryIpArgs Empty => new PrimaryIpArgs();
    }

    public sealed class PrimaryIpState : global::Pulumi.ResourceArgs
    {
        [Input("ipAddressId")]
        public Input<int>? IpAddressId { get; set; }

        [Input("ipAddressVersion")]
        public Input<int>? IpAddressVersion { get; set; }

        [Input("virtualMachineId")]
        public Input<int>? VirtualMachineId { get; set; }

        public PrimaryIpState()
        {
        }
        public static new PrimaryIpState Empty => new PrimaryIpState();
    }
}
