// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace HBJYDev.Netbox
{
    public static class Config
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly Pulumi.Config __config = new Pulumi.Config("netbox");

        private static readonly __Value<bool?> _allowInsecureHttps = new __Value<bool?>(() => __config.GetBoolean("allowInsecureHttps"));
        /// <summary>
        /// Flag to set whether to allow https with invalid certificates
        /// </summary>
        public static bool? AllowInsecureHttps
        {
            get => _allowInsecureHttps.Get();
            set => _allowInsecureHttps.Set(value);
        }

        private static readonly __Value<string?> _apiToken = new __Value<string?>(() => __config.Get("apiToken") ?? Utilities.GetEnv("NETBOX_API_TOKEN"));
        /// <summary>
        /// Netbox API authentication token
        /// </summary>
        public static string? ApiToken
        {
            get => _apiToken.Get();
            set => _apiToken.Set(value);
        }

        private static readonly __Value<ImmutableDictionary<string, object>?> _headers = new __Value<ImmutableDictionary<string, object>?>(() => __config.GetObject<ImmutableDictionary<string, object>>("headers"));
        /// <summary>
        /// Set these header on all requests to Netbox
        /// </summary>
        public static ImmutableDictionary<string, object>? Headers
        {
            get => _headers.Get();
            set => _headers.Set(value);
        }

        private static readonly __Value<string?> _serverUrl = new __Value<string?>(() => __config.Get("serverUrl") ?? Utilities.GetEnv("NETBOX_SERVER_URL"));
        /// <summary>
        /// Location of Netbox server including scheme and optional port
        /// </summary>
        public static string? ServerUrl
        {
            get => _serverUrl.Get();
            set => _serverUrl.Set(value);
        }

        private static readonly __Value<bool?> _skipVersionCheck = new __Value<bool?>(() => __config.GetBoolean("skipVersionCheck"));
        /// <summary>
        /// If true, do not try to determine the running Netbox version at provider startup. Disables warnings about possibly
        /// unsupported Netbox version. Also useful for local testing on terraform plans.
        /// </summary>
        public static bool? SkipVersionCheck
        {
            get => _skipVersionCheck.Get();
            set => _skipVersionCheck.Set(value);
        }

    }
}
