// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace HBJYDev.Netbox
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/ipam/#ip-ranges):
    /// 
    /// &gt; This model represents an arbitrary range of individual IPv4 or IPv6 addresses, inclusive of its starting and ending addresses. For instance, the range 192.0.2.10 to 192.0.2.20 has eleven members. (The total member count is available as the size property on an IPRange instance.) Like prefixes and IP addresses, each IP range may optionally be assigned to a VRF and/or tenant.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Netbox = HBJYDev.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var custAProd = new Netbox.IpRange("custAProd", new()
    ///     {
    ///         EndAddress = "10.0.0.50/24",
    ///         StartAddress = "10.0.0.1/24",
    ///         Tags = new[]
    ///         {
    ///             "customer-a",
    ///             "prod",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:index/ipRange:IpRange")]
    public partial class IpRange : global::Pulumi.CustomResource
    {
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("endAddress")]
        public Output<string> EndAddress { get; private set; } = null!;

        [Output("roleId")]
        public Output<int?> RoleId { get; private set; } = null!;

        [Output("startAddress")]
        public Output<string> StartAddress { get; private set; } = null!;

        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("tenantId")]
        public Output<int?> TenantId { get; private set; } = null!;

        [Output("vrfId")]
        public Output<int?> VrfId { get; private set; } = null!;


        /// <summary>
        /// Create a IpRange resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IpRange(string name, IpRangeArgs args, CustomResourceOptions? options = null)
            : base("netbox:index/ipRange:IpRange", name, args ?? new IpRangeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IpRange(string name, Input<string> id, IpRangeState? state = null, CustomResourceOptions? options = null)
            : base("netbox:index/ipRange:IpRange", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IpRange resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IpRange Get(string name, Input<string> id, IpRangeState? state = null, CustomResourceOptions? options = null)
        {
            return new IpRange(name, id, state, options);
        }
    }

    public sealed class IpRangeArgs : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("endAddress", required: true)]
        public Input<string> EndAddress { get; set; } = null!;

        [Input("roleId")]
        public Input<int>? RoleId { get; set; }

        [Input("startAddress", required: true)]
        public Input<string> StartAddress { get; set; } = null!;

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("tenantId")]
        public Input<int>? TenantId { get; set; }

        [Input("vrfId")]
        public Input<int>? VrfId { get; set; }

        public IpRangeArgs()
        {
        }
        public static new IpRangeArgs Empty => new IpRangeArgs();
    }

    public sealed class IpRangeState : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("endAddress")]
        public Input<string>? EndAddress { get; set; }

        [Input("roleId")]
        public Input<int>? RoleId { get; set; }

        [Input("startAddress")]
        public Input<string>? StartAddress { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("tenantId")]
        public Input<int>? TenantId { get; set; }

        [Input("vrfId")]
        public Input<int>? VrfId { get; set; }

        public IpRangeState()
        {
        }
        public static new IpRangeState Empty => new IpRangeState();
    }
}
