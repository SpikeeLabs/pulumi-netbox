// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace HBJYDev.Netbox
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/circuits/#circuits_1):
    /// 
    /// &gt; A communications circuit represents a single physical link connecting exactly two endpoints, commonly referred to as its A and Z terminations. A circuit in NetBox may have zero, one, or two terminations defined. It is common to have only one termination defined when you don't necessarily care about the details of the provider side of the circuit, e.g. for Internet access circuits. Both terminations would likely be modeled for circuits which connect one customer site to another.
    /// &gt; 
    /// &gt; Each circuit is associated with a provider and a user-defined type. For example, you might have Internet access circuits delivered to each site by one provider, and private MPLS circuits delivered by another. Each circuit must be assigned a circuit ID, each of which must be unique per provider.
    /// </summary>
    [NetboxResourceType("netbox:index/circuit:Circuit")]
    public partial class Circuit : global::Pulumi.CustomResource
    {
        [Output("cid")]
        public Output<string> Cid { get; private set; } = null!;

        [Output("providerId")]
        public Output<int> ProviderId { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tenantId")]
        public Output<int?> TenantId { get; private set; } = null!;

        [Output("typeId")]
        public Output<int> TypeId { get; private set; } = null!;


        /// <summary>
        /// Create a Circuit resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Circuit(string name, CircuitArgs args, CustomResourceOptions? options = null)
            : base("netbox:index/circuit:Circuit", name, args ?? new CircuitArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Circuit(string name, Input<string> id, CircuitState? state = null, CustomResourceOptions? options = null)
            : base("netbox:index/circuit:Circuit", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Circuit resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Circuit Get(string name, Input<string> id, CircuitState? state = null, CustomResourceOptions? options = null)
        {
            return new Circuit(name, id, state, options);
        }
    }

    public sealed class CircuitArgs : global::Pulumi.ResourceArgs
    {
        [Input("cid", required: true)]
        public Input<string> Cid { get; set; } = null!;

        [Input("providerId", required: true)]
        public Input<int> ProviderId { get; set; } = null!;

        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        [Input("tenantId")]
        public Input<int>? TenantId { get; set; }

        [Input("typeId", required: true)]
        public Input<int> TypeId { get; set; } = null!;

        public CircuitArgs()
        {
        }
        public static new CircuitArgs Empty => new CircuitArgs();
    }

    public sealed class CircuitState : global::Pulumi.ResourceArgs
    {
        [Input("cid")]
        public Input<string>? Cid { get; set; }

        [Input("providerId")]
        public Input<int>? ProviderId { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tenantId")]
        public Input<int>? TenantId { get; set; }

        [Input("typeId")]
        public Input<int>? TypeId { get; set; }

        public CircuitState()
        {
        }
        public static new CircuitState Empty => new CircuitState();
    }
}
