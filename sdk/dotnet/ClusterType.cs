// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace HBJYDev.Netbox
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/virtualization/#cluster-types):
    /// 
    /// &gt; A cluster type represents a technology or mechanism by which a cluster is formed. For example, you might create a cluster type named "VMware vSphere" for a locally hosted cluster or "DigitalOcean NYC3" for one hosted by a cloud provider.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Netbox = HBJYDev.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vmwVsphere = new Netbox.ClusterType("vmwVsphere");
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:index/clusterType:ClusterType")]
    public partial class ClusterType : global::Pulumi.CustomResource
    {
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;


        /// <summary>
        /// Create a ClusterType resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ClusterType(string name, ClusterTypeArgs? args = null, CustomResourceOptions? options = null)
            : base("netbox:index/clusterType:ClusterType", name, args ?? new ClusterTypeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ClusterType(string name, Input<string> id, ClusterTypeState? state = null, CustomResourceOptions? options = null)
            : base("netbox:index/clusterType:ClusterType", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ClusterType resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ClusterType Get(string name, Input<string> id, ClusterTypeState? state = null, CustomResourceOptions? options = null)
        {
            return new ClusterType(name, id, state, options);
        }
    }

    public sealed class ClusterTypeArgs : global::Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public ClusterTypeArgs()
        {
        }
        public static new ClusterTypeArgs Empty => new ClusterTypeArgs();
    }

    public sealed class ClusterTypeState : global::Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public ClusterTypeState()
        {
        }
        public static new ClusterTypeState Empty => new ClusterTypeState();
    }
}
