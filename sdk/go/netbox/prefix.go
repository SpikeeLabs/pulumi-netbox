// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/ipam/#prefixes):
//
// > A prefix is an IPv4 or IPv6 network and mask expressed in CIDR notation (e.g. 192.0.2.0/24). A prefix entails only the "network portion" of an IP address: All bits in the address not covered by the mask must be zero. (In other words, a prefix cannot be a specific IP address.)
// >
// > Prefixes are automatically organized by their parent aggregates. Additionally, each prefix can be assigned to a particular site and virtual routing and forwarding instance (VRF). Each VRF represents a separate IP space or routing table. All prefixes not assigned to a VRF are considered to be in the "global" table.
type Prefix struct {
	pulumi.CustomResourceState

	Description  pulumi.StringPtrOutput   `pulumi:"description"`
	IsPool       pulumi.BoolPtrOutput     `pulumi:"isPool"`
	MarkUtilized pulumi.BoolPtrOutput     `pulumi:"markUtilized"`
	Prefix       pulumi.StringOutput      `pulumi:"prefix"`
	RoleId       pulumi.IntPtrOutput      `pulumi:"roleId"`
	SiteId       pulumi.IntPtrOutput      `pulumi:"siteId"`
	Status       pulumi.StringOutput      `pulumi:"status"`
	Tags         pulumi.StringArrayOutput `pulumi:"tags"`
	TenantId     pulumi.IntPtrOutput      `pulumi:"tenantId"`
	VlanId       pulumi.IntPtrOutput      `pulumi:"vlanId"`
	VrfId        pulumi.IntPtrOutput      `pulumi:"vrfId"`
}

// NewPrefix registers a new resource with the given unique name, arguments, and options.
func NewPrefix(ctx *pulumi.Context,
	name string, args *PrefixArgs, opts ...pulumi.ResourceOption) (*Prefix, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Prefix == nil {
		return nil, errors.New("invalid value for required argument 'Prefix'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	var resource Prefix
	err := ctx.RegisterResource("netbox:index/prefix:Prefix", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrefix gets an existing Prefix resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrefix(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrefixState, opts ...pulumi.ResourceOption) (*Prefix, error) {
	var resource Prefix
	err := ctx.ReadResource("netbox:index/prefix:Prefix", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Prefix resources.
type prefixState struct {
	Description  *string  `pulumi:"description"`
	IsPool       *bool    `pulumi:"isPool"`
	MarkUtilized *bool    `pulumi:"markUtilized"`
	Prefix       *string  `pulumi:"prefix"`
	RoleId       *int     `pulumi:"roleId"`
	SiteId       *int     `pulumi:"siteId"`
	Status       *string  `pulumi:"status"`
	Tags         []string `pulumi:"tags"`
	TenantId     *int     `pulumi:"tenantId"`
	VlanId       *int     `pulumi:"vlanId"`
	VrfId        *int     `pulumi:"vrfId"`
}

type PrefixState struct {
	Description  pulumi.StringPtrInput
	IsPool       pulumi.BoolPtrInput
	MarkUtilized pulumi.BoolPtrInput
	Prefix       pulumi.StringPtrInput
	RoleId       pulumi.IntPtrInput
	SiteId       pulumi.IntPtrInput
	Status       pulumi.StringPtrInput
	Tags         pulumi.StringArrayInput
	TenantId     pulumi.IntPtrInput
	VlanId       pulumi.IntPtrInput
	VrfId        pulumi.IntPtrInput
}

func (PrefixState) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixState)(nil)).Elem()
}

type prefixArgs struct {
	Description  *string  `pulumi:"description"`
	IsPool       *bool    `pulumi:"isPool"`
	MarkUtilized *bool    `pulumi:"markUtilized"`
	Prefix       string   `pulumi:"prefix"`
	RoleId       *int     `pulumi:"roleId"`
	SiteId       *int     `pulumi:"siteId"`
	Status       string   `pulumi:"status"`
	Tags         []string `pulumi:"tags"`
	TenantId     *int     `pulumi:"tenantId"`
	VlanId       *int     `pulumi:"vlanId"`
	VrfId        *int     `pulumi:"vrfId"`
}

// The set of arguments for constructing a Prefix resource.
type PrefixArgs struct {
	Description  pulumi.StringPtrInput
	IsPool       pulumi.BoolPtrInput
	MarkUtilized pulumi.BoolPtrInput
	Prefix       pulumi.StringInput
	RoleId       pulumi.IntPtrInput
	SiteId       pulumi.IntPtrInput
	Status       pulumi.StringInput
	Tags         pulumi.StringArrayInput
	TenantId     pulumi.IntPtrInput
	VlanId       pulumi.IntPtrInput
	VrfId        pulumi.IntPtrInput
}

func (PrefixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixArgs)(nil)).Elem()
}

type PrefixInput interface {
	pulumi.Input

	ToPrefixOutput() PrefixOutput
	ToPrefixOutputWithContext(ctx context.Context) PrefixOutput
}

func (*Prefix) ElementType() reflect.Type {
	return reflect.TypeOf((**Prefix)(nil)).Elem()
}

func (i *Prefix) ToPrefixOutput() PrefixOutput {
	return i.ToPrefixOutputWithContext(context.Background())
}

func (i *Prefix) ToPrefixOutputWithContext(ctx context.Context) PrefixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixOutput)
}

// PrefixArrayInput is an input type that accepts PrefixArray and PrefixArrayOutput values.
// You can construct a concrete instance of `PrefixArrayInput` via:
//
//	PrefixArray{ PrefixArgs{...} }
type PrefixArrayInput interface {
	pulumi.Input

	ToPrefixArrayOutput() PrefixArrayOutput
	ToPrefixArrayOutputWithContext(context.Context) PrefixArrayOutput
}

type PrefixArray []PrefixInput

func (PrefixArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Prefix)(nil)).Elem()
}

func (i PrefixArray) ToPrefixArrayOutput() PrefixArrayOutput {
	return i.ToPrefixArrayOutputWithContext(context.Background())
}

func (i PrefixArray) ToPrefixArrayOutputWithContext(ctx context.Context) PrefixArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixArrayOutput)
}

// PrefixMapInput is an input type that accepts PrefixMap and PrefixMapOutput values.
// You can construct a concrete instance of `PrefixMapInput` via:
//
//	PrefixMap{ "key": PrefixArgs{...} }
type PrefixMapInput interface {
	pulumi.Input

	ToPrefixMapOutput() PrefixMapOutput
	ToPrefixMapOutputWithContext(context.Context) PrefixMapOutput
}

type PrefixMap map[string]PrefixInput

func (PrefixMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Prefix)(nil)).Elem()
}

func (i PrefixMap) ToPrefixMapOutput() PrefixMapOutput {
	return i.ToPrefixMapOutputWithContext(context.Background())
}

func (i PrefixMap) ToPrefixMapOutputWithContext(ctx context.Context) PrefixMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixMapOutput)
}

type PrefixOutput struct{ *pulumi.OutputState }

func (PrefixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Prefix)(nil)).Elem()
}

func (o PrefixOutput) ToPrefixOutput() PrefixOutput {
	return o
}

func (o PrefixOutput) ToPrefixOutputWithContext(ctx context.Context) PrefixOutput {
	return o
}

func (o PrefixOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Prefix) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PrefixOutput) IsPool() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Prefix) pulumi.BoolPtrOutput { return v.IsPool }).(pulumi.BoolPtrOutput)
}

func (o PrefixOutput) MarkUtilized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Prefix) pulumi.BoolPtrOutput { return v.MarkUtilized }).(pulumi.BoolPtrOutput)
}

func (o PrefixOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Prefix) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

func (o PrefixOutput) RoleId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Prefix) pulumi.IntPtrOutput { return v.RoleId }).(pulumi.IntPtrOutput)
}

func (o PrefixOutput) SiteId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Prefix) pulumi.IntPtrOutput { return v.SiteId }).(pulumi.IntPtrOutput)
}

func (o PrefixOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Prefix) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o PrefixOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Prefix) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o PrefixOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Prefix) pulumi.IntPtrOutput { return v.TenantId }).(pulumi.IntPtrOutput)
}

func (o PrefixOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Prefix) pulumi.IntPtrOutput { return v.VlanId }).(pulumi.IntPtrOutput)
}

func (o PrefixOutput) VrfId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Prefix) pulumi.IntPtrOutput { return v.VrfId }).(pulumi.IntPtrOutput)
}

type PrefixArrayOutput struct{ *pulumi.OutputState }

func (PrefixArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Prefix)(nil)).Elem()
}

func (o PrefixArrayOutput) ToPrefixArrayOutput() PrefixArrayOutput {
	return o
}

func (o PrefixArrayOutput) ToPrefixArrayOutputWithContext(ctx context.Context) PrefixArrayOutput {
	return o
}

func (o PrefixArrayOutput) Index(i pulumi.IntInput) PrefixOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Prefix {
		return vs[0].([]*Prefix)[vs[1].(int)]
	}).(PrefixOutput)
}

type PrefixMapOutput struct{ *pulumi.OutputState }

func (PrefixMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Prefix)(nil)).Elem()
}

func (o PrefixMapOutput) ToPrefixMapOutput() PrefixMapOutput {
	return o
}

func (o PrefixMapOutput) ToPrefixMapOutputWithContext(ctx context.Context) PrefixMapOutput {
	return o
}

func (o PrefixMapOutput) MapIndex(k pulumi.StringInput) PrefixOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Prefix {
		return vs[0].(map[string]*Prefix)[vs[1].(string)]
	}).(PrefixOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixInput)(nil)).Elem(), &Prefix{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixArrayInput)(nil)).Elem(), PrefixArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixMapInput)(nil)).Elem(), PrefixMap{})
	pulumi.RegisterOutputType(PrefixOutput{})
	pulumi.RegisterOutputType(PrefixArrayOutput{})
	pulumi.RegisterOutputType(PrefixMapOutput{})
}
