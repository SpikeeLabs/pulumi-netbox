// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AvailableIpAddress struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput   `pulumi:"description"`
	DnsName     pulumi.StringPtrOutput   `pulumi:"dnsName"`
	InterfaceId pulumi.IntPtrOutput      `pulumi:"interfaceId"`
	IpAddress   pulumi.StringOutput      `pulumi:"ipAddress"`
	IpRangeId   pulumi.IntPtrOutput      `pulumi:"ipRangeId"`
	PrefixId    pulumi.IntPtrOutput      `pulumi:"prefixId"`
	Status      pulumi.StringPtrOutput   `pulumi:"status"`
	Tags        pulumi.StringArrayOutput `pulumi:"tags"`
	TenantId    pulumi.IntPtrOutput      `pulumi:"tenantId"`
	VrfId       pulumi.IntPtrOutput      `pulumi:"vrfId"`
}

// NewAvailableIpAddress registers a new resource with the given unique name, arguments, and options.
func NewAvailableIpAddress(ctx *pulumi.Context,
	name string, args *AvailableIpAddressArgs, opts ...pulumi.ResourceOption) (*AvailableIpAddress, error) {
	if args == nil {
		args = &AvailableIpAddressArgs{}
	}

	var resource AvailableIpAddress
	err := ctx.RegisterResource("netbox:index/availableIpAddress:AvailableIpAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAvailableIpAddress gets an existing AvailableIpAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAvailableIpAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AvailableIpAddressState, opts ...pulumi.ResourceOption) (*AvailableIpAddress, error) {
	var resource AvailableIpAddress
	err := ctx.ReadResource("netbox:index/availableIpAddress:AvailableIpAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AvailableIpAddress resources.
type availableIpAddressState struct {
	Description *string  `pulumi:"description"`
	DnsName     *string  `pulumi:"dnsName"`
	InterfaceId *int     `pulumi:"interfaceId"`
	IpAddress   *string  `pulumi:"ipAddress"`
	IpRangeId   *int     `pulumi:"ipRangeId"`
	PrefixId    *int     `pulumi:"prefixId"`
	Status      *string  `pulumi:"status"`
	Tags        []string `pulumi:"tags"`
	TenantId    *int     `pulumi:"tenantId"`
	VrfId       *int     `pulumi:"vrfId"`
}

type AvailableIpAddressState struct {
	Description pulumi.StringPtrInput
	DnsName     pulumi.StringPtrInput
	InterfaceId pulumi.IntPtrInput
	IpAddress   pulumi.StringPtrInput
	IpRangeId   pulumi.IntPtrInput
	PrefixId    pulumi.IntPtrInput
	Status      pulumi.StringPtrInput
	Tags        pulumi.StringArrayInput
	TenantId    pulumi.IntPtrInput
	VrfId       pulumi.IntPtrInput
}

func (AvailableIpAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*availableIpAddressState)(nil)).Elem()
}

type availableIpAddressArgs struct {
	Description *string  `pulumi:"description"`
	DnsName     *string  `pulumi:"dnsName"`
	InterfaceId *int     `pulumi:"interfaceId"`
	IpRangeId   *int     `pulumi:"ipRangeId"`
	PrefixId    *int     `pulumi:"prefixId"`
	Status      *string  `pulumi:"status"`
	Tags        []string `pulumi:"tags"`
	TenantId    *int     `pulumi:"tenantId"`
	VrfId       *int     `pulumi:"vrfId"`
}

// The set of arguments for constructing a AvailableIpAddress resource.
type AvailableIpAddressArgs struct {
	Description pulumi.StringPtrInput
	DnsName     pulumi.StringPtrInput
	InterfaceId pulumi.IntPtrInput
	IpRangeId   pulumi.IntPtrInput
	PrefixId    pulumi.IntPtrInput
	Status      pulumi.StringPtrInput
	Tags        pulumi.StringArrayInput
	TenantId    pulumi.IntPtrInput
	VrfId       pulumi.IntPtrInput
}

func (AvailableIpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*availableIpAddressArgs)(nil)).Elem()
}

type AvailableIpAddressInput interface {
	pulumi.Input

	ToAvailableIpAddressOutput() AvailableIpAddressOutput
	ToAvailableIpAddressOutputWithContext(ctx context.Context) AvailableIpAddressOutput
}

func (*AvailableIpAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**AvailableIpAddress)(nil)).Elem()
}

func (i *AvailableIpAddress) ToAvailableIpAddressOutput() AvailableIpAddressOutput {
	return i.ToAvailableIpAddressOutputWithContext(context.Background())
}

func (i *AvailableIpAddress) ToAvailableIpAddressOutputWithContext(ctx context.Context) AvailableIpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableIpAddressOutput)
}

// AvailableIpAddressArrayInput is an input type that accepts AvailableIpAddressArray and AvailableIpAddressArrayOutput values.
// You can construct a concrete instance of `AvailableIpAddressArrayInput` via:
//
//	AvailableIpAddressArray{ AvailableIpAddressArgs{...} }
type AvailableIpAddressArrayInput interface {
	pulumi.Input

	ToAvailableIpAddressArrayOutput() AvailableIpAddressArrayOutput
	ToAvailableIpAddressArrayOutputWithContext(context.Context) AvailableIpAddressArrayOutput
}

type AvailableIpAddressArray []AvailableIpAddressInput

func (AvailableIpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AvailableIpAddress)(nil)).Elem()
}

func (i AvailableIpAddressArray) ToAvailableIpAddressArrayOutput() AvailableIpAddressArrayOutput {
	return i.ToAvailableIpAddressArrayOutputWithContext(context.Background())
}

func (i AvailableIpAddressArray) ToAvailableIpAddressArrayOutputWithContext(ctx context.Context) AvailableIpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableIpAddressArrayOutput)
}

// AvailableIpAddressMapInput is an input type that accepts AvailableIpAddressMap and AvailableIpAddressMapOutput values.
// You can construct a concrete instance of `AvailableIpAddressMapInput` via:
//
//	AvailableIpAddressMap{ "key": AvailableIpAddressArgs{...} }
type AvailableIpAddressMapInput interface {
	pulumi.Input

	ToAvailableIpAddressMapOutput() AvailableIpAddressMapOutput
	ToAvailableIpAddressMapOutputWithContext(context.Context) AvailableIpAddressMapOutput
}

type AvailableIpAddressMap map[string]AvailableIpAddressInput

func (AvailableIpAddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AvailableIpAddress)(nil)).Elem()
}

func (i AvailableIpAddressMap) ToAvailableIpAddressMapOutput() AvailableIpAddressMapOutput {
	return i.ToAvailableIpAddressMapOutputWithContext(context.Background())
}

func (i AvailableIpAddressMap) ToAvailableIpAddressMapOutputWithContext(ctx context.Context) AvailableIpAddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableIpAddressMapOutput)
}

type AvailableIpAddressOutput struct{ *pulumi.OutputState }

func (AvailableIpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvailableIpAddress)(nil)).Elem()
}

func (o AvailableIpAddressOutput) ToAvailableIpAddressOutput() AvailableIpAddressOutput {
	return o
}

func (o AvailableIpAddressOutput) ToAvailableIpAddressOutputWithContext(ctx context.Context) AvailableIpAddressOutput {
	return o
}

func (o AvailableIpAddressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AvailableIpAddressOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.StringPtrOutput { return v.DnsName }).(pulumi.StringPtrOutput)
}

func (o AvailableIpAddressOutput) InterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.IntPtrOutput { return v.InterfaceId }).(pulumi.IntPtrOutput)
}

func (o AvailableIpAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

func (o AvailableIpAddressOutput) IpRangeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.IntPtrOutput { return v.IpRangeId }).(pulumi.IntPtrOutput)
}

func (o AvailableIpAddressOutput) PrefixId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.IntPtrOutput { return v.PrefixId }).(pulumi.IntPtrOutput)
}

func (o AvailableIpAddressOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o AvailableIpAddressOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o AvailableIpAddressOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.IntPtrOutput { return v.TenantId }).(pulumi.IntPtrOutput)
}

func (o AvailableIpAddressOutput) VrfId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.IntPtrOutput { return v.VrfId }).(pulumi.IntPtrOutput)
}

type AvailableIpAddressArrayOutput struct{ *pulumi.OutputState }

func (AvailableIpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AvailableIpAddress)(nil)).Elem()
}

func (o AvailableIpAddressArrayOutput) ToAvailableIpAddressArrayOutput() AvailableIpAddressArrayOutput {
	return o
}

func (o AvailableIpAddressArrayOutput) ToAvailableIpAddressArrayOutputWithContext(ctx context.Context) AvailableIpAddressArrayOutput {
	return o
}

func (o AvailableIpAddressArrayOutput) Index(i pulumi.IntInput) AvailableIpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AvailableIpAddress {
		return vs[0].([]*AvailableIpAddress)[vs[1].(int)]
	}).(AvailableIpAddressOutput)
}

type AvailableIpAddressMapOutput struct{ *pulumi.OutputState }

func (AvailableIpAddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AvailableIpAddress)(nil)).Elem()
}

func (o AvailableIpAddressMapOutput) ToAvailableIpAddressMapOutput() AvailableIpAddressMapOutput {
	return o
}

func (o AvailableIpAddressMapOutput) ToAvailableIpAddressMapOutputWithContext(ctx context.Context) AvailableIpAddressMapOutput {
	return o
}

func (o AvailableIpAddressMapOutput) MapIndex(k pulumi.StringInput) AvailableIpAddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AvailableIpAddress {
		return vs[0].(map[string]*AvailableIpAddress)[vs[1].(string)]
	}).(AvailableIpAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableIpAddressInput)(nil)).Elem(), &AvailableIpAddress{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableIpAddressArrayInput)(nil)).Elem(), AvailableIpAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableIpAddressMapInput)(nil)).Elem(), AvailableIpAddressMap{})
	pulumi.RegisterOutputType(AvailableIpAddressOutput{})
	pulumi.RegisterOutputType(AvailableIpAddressArrayOutput{})
	pulumi.RegisterOutputType(AvailableIpAddressMapOutput{})
}
