// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CustomField struct {
	pulumi.CustomResourceState

	Choices           pulumi.StringArrayOutput `pulumi:"choices"`
	ContentTypes      pulumi.StringArrayOutput `pulumi:"contentTypes"`
	Default           pulumi.StringPtrOutput   `pulumi:"default"`
	Description       pulumi.StringPtrOutput   `pulumi:"description"`
	Label             pulumi.StringPtrOutput   `pulumi:"label"`
	Name              pulumi.StringOutput      `pulumi:"name"`
	Required          pulumi.BoolPtrOutput     `pulumi:"required"`
	Type              pulumi.StringOutput      `pulumi:"type"`
	ValidationMaximum pulumi.IntPtrOutput      `pulumi:"validationMaximum"`
	ValidationMinimum pulumi.IntPtrOutput      `pulumi:"validationMinimum"`
	ValidationRegex   pulumi.StringPtrOutput   `pulumi:"validationRegex"`
	Weight            pulumi.IntOutput         `pulumi:"weight"`
}

// NewCustomField registers a new resource with the given unique name, arguments, and options.
func NewCustomField(ctx *pulumi.Context,
	name string, args *CustomFieldArgs, opts ...pulumi.ResourceOption) (*CustomField, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentTypes == nil {
		return nil, errors.New("invalid value for required argument 'ContentTypes'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Weight == nil {
		return nil, errors.New("invalid value for required argument 'Weight'")
	}
	var resource CustomField
	err := ctx.RegisterResource("netbox:index/customField:CustomField", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomField gets an existing CustomField resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomField(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomFieldState, opts ...pulumi.ResourceOption) (*CustomField, error) {
	var resource CustomField
	err := ctx.ReadResource("netbox:index/customField:CustomField", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomField resources.
type customFieldState struct {
	Choices           []string `pulumi:"choices"`
	ContentTypes      []string `pulumi:"contentTypes"`
	Default           *string  `pulumi:"default"`
	Description       *string  `pulumi:"description"`
	Label             *string  `pulumi:"label"`
	Name              *string  `pulumi:"name"`
	Required          *bool    `pulumi:"required"`
	Type              *string  `pulumi:"type"`
	ValidationMaximum *int     `pulumi:"validationMaximum"`
	ValidationMinimum *int     `pulumi:"validationMinimum"`
	ValidationRegex   *string  `pulumi:"validationRegex"`
	Weight            *int     `pulumi:"weight"`
}

type CustomFieldState struct {
	Choices           pulumi.StringArrayInput
	ContentTypes      pulumi.StringArrayInput
	Default           pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	Label             pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Required          pulumi.BoolPtrInput
	Type              pulumi.StringPtrInput
	ValidationMaximum pulumi.IntPtrInput
	ValidationMinimum pulumi.IntPtrInput
	ValidationRegex   pulumi.StringPtrInput
	Weight            pulumi.IntPtrInput
}

func (CustomFieldState) ElementType() reflect.Type {
	return reflect.TypeOf((*customFieldState)(nil)).Elem()
}

type customFieldArgs struct {
	Choices           []string `pulumi:"choices"`
	ContentTypes      []string `pulumi:"contentTypes"`
	Default           *string  `pulumi:"default"`
	Description       *string  `pulumi:"description"`
	Label             *string  `pulumi:"label"`
	Name              *string  `pulumi:"name"`
	Required          *bool    `pulumi:"required"`
	Type              string   `pulumi:"type"`
	ValidationMaximum *int     `pulumi:"validationMaximum"`
	ValidationMinimum *int     `pulumi:"validationMinimum"`
	ValidationRegex   *string  `pulumi:"validationRegex"`
	Weight            int      `pulumi:"weight"`
}

// The set of arguments for constructing a CustomField resource.
type CustomFieldArgs struct {
	Choices           pulumi.StringArrayInput
	ContentTypes      pulumi.StringArrayInput
	Default           pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	Label             pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Required          pulumi.BoolPtrInput
	Type              pulumi.StringInput
	ValidationMaximum pulumi.IntPtrInput
	ValidationMinimum pulumi.IntPtrInput
	ValidationRegex   pulumi.StringPtrInput
	Weight            pulumi.IntInput
}

func (CustomFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customFieldArgs)(nil)).Elem()
}

type CustomFieldInput interface {
	pulumi.Input

	ToCustomFieldOutput() CustomFieldOutput
	ToCustomFieldOutputWithContext(ctx context.Context) CustomFieldOutput
}

func (*CustomField) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomField)(nil)).Elem()
}

func (i *CustomField) ToCustomFieldOutput() CustomFieldOutput {
	return i.ToCustomFieldOutputWithContext(context.Background())
}

func (i *CustomField) ToCustomFieldOutputWithContext(ctx context.Context) CustomFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomFieldOutput)
}

// CustomFieldArrayInput is an input type that accepts CustomFieldArray and CustomFieldArrayOutput values.
// You can construct a concrete instance of `CustomFieldArrayInput` via:
//
//	CustomFieldArray{ CustomFieldArgs{...} }
type CustomFieldArrayInput interface {
	pulumi.Input

	ToCustomFieldArrayOutput() CustomFieldArrayOutput
	ToCustomFieldArrayOutputWithContext(context.Context) CustomFieldArrayOutput
}

type CustomFieldArray []CustomFieldInput

func (CustomFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomField)(nil)).Elem()
}

func (i CustomFieldArray) ToCustomFieldArrayOutput() CustomFieldArrayOutput {
	return i.ToCustomFieldArrayOutputWithContext(context.Background())
}

func (i CustomFieldArray) ToCustomFieldArrayOutputWithContext(ctx context.Context) CustomFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomFieldArrayOutput)
}

// CustomFieldMapInput is an input type that accepts CustomFieldMap and CustomFieldMapOutput values.
// You can construct a concrete instance of `CustomFieldMapInput` via:
//
//	CustomFieldMap{ "key": CustomFieldArgs{...} }
type CustomFieldMapInput interface {
	pulumi.Input

	ToCustomFieldMapOutput() CustomFieldMapOutput
	ToCustomFieldMapOutputWithContext(context.Context) CustomFieldMapOutput
}

type CustomFieldMap map[string]CustomFieldInput

func (CustomFieldMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomField)(nil)).Elem()
}

func (i CustomFieldMap) ToCustomFieldMapOutput() CustomFieldMapOutput {
	return i.ToCustomFieldMapOutputWithContext(context.Background())
}

func (i CustomFieldMap) ToCustomFieldMapOutputWithContext(ctx context.Context) CustomFieldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomFieldMapOutput)
}

type CustomFieldOutput struct{ *pulumi.OutputState }

func (CustomFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomField)(nil)).Elem()
}

func (o CustomFieldOutput) ToCustomFieldOutput() CustomFieldOutput {
	return o
}

func (o CustomFieldOutput) ToCustomFieldOutputWithContext(ctx context.Context) CustomFieldOutput {
	return o
}

func (o CustomFieldOutput) Choices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomField) pulumi.StringArrayOutput { return v.Choices }).(pulumi.StringArrayOutput)
}

func (o CustomFieldOutput) ContentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomField) pulumi.StringArrayOutput { return v.ContentTypes }).(pulumi.StringArrayOutput)
}

func (o CustomFieldOutput) Default() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomField) pulumi.StringPtrOutput { return v.Default }).(pulumi.StringPtrOutput)
}

func (o CustomFieldOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomField) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CustomFieldOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomField) pulumi.StringPtrOutput { return v.Label }).(pulumi.StringPtrOutput)
}

func (o CustomFieldOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomField) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CustomFieldOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CustomField) pulumi.BoolPtrOutput { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o CustomFieldOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomField) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o CustomFieldOutput) ValidationMaximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomField) pulumi.IntPtrOutput { return v.ValidationMaximum }).(pulumi.IntPtrOutput)
}

func (o CustomFieldOutput) ValidationMinimum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomField) pulumi.IntPtrOutput { return v.ValidationMinimum }).(pulumi.IntPtrOutput)
}

func (o CustomFieldOutput) ValidationRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomField) pulumi.StringPtrOutput { return v.ValidationRegex }).(pulumi.StringPtrOutput)
}

func (o CustomFieldOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *CustomField) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type CustomFieldArrayOutput struct{ *pulumi.OutputState }

func (CustomFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomField)(nil)).Elem()
}

func (o CustomFieldArrayOutput) ToCustomFieldArrayOutput() CustomFieldArrayOutput {
	return o
}

func (o CustomFieldArrayOutput) ToCustomFieldArrayOutputWithContext(ctx context.Context) CustomFieldArrayOutput {
	return o
}

func (o CustomFieldArrayOutput) Index(i pulumi.IntInput) CustomFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomField {
		return vs[0].([]*CustomField)[vs[1].(int)]
	}).(CustomFieldOutput)
}

type CustomFieldMapOutput struct{ *pulumi.OutputState }

func (CustomFieldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomField)(nil)).Elem()
}

func (o CustomFieldMapOutput) ToCustomFieldMapOutput() CustomFieldMapOutput {
	return o
}

func (o CustomFieldMapOutput) ToCustomFieldMapOutputWithContext(ctx context.Context) CustomFieldMapOutput {
	return o
}

func (o CustomFieldMapOutput) MapIndex(k pulumi.StringInput) CustomFieldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomField {
		return vs[0].(map[string]*CustomField)[vs[1].(string)]
	}).(CustomFieldOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomFieldInput)(nil)).Elem(), &CustomField{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomFieldArrayInput)(nil)).Elem(), CustomFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomFieldMapInput)(nil)).Elem(), CustomFieldMap{})
	pulumi.RegisterOutputType(CustomFieldOutput{})
	pulumi.RegisterOutputType(CustomFieldArrayOutput{})
	pulumi.RegisterOutputType(CustomFieldMapOutput{})
}
