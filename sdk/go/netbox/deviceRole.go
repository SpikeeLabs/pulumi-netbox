// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/devices/#device-roles):
//
// > Devices can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for core switches, distribution switches, and access switches within your network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/hbjydev/pulumi-netbox/sdk/go/netbox"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := netbox.NewDeviceRole(ctx, "coreSw", &netbox.DeviceRoleArgs{
//				ColorHex: pulumi.String("FF00FF"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DeviceRole struct {
	pulumi.CustomResourceState

	ColorHex pulumi.StringOutput  `pulumi:"colorHex"`
	Name     pulumi.StringOutput  `pulumi:"name"`
	Slug     pulumi.StringOutput  `pulumi:"slug"`
	VmRole   pulumi.BoolPtrOutput `pulumi:"vmRole"`
}

// NewDeviceRole registers a new resource with the given unique name, arguments, and options.
func NewDeviceRole(ctx *pulumi.Context,
	name string, args *DeviceRoleArgs, opts ...pulumi.ResourceOption) (*DeviceRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ColorHex == nil {
		return nil, errors.New("invalid value for required argument 'ColorHex'")
	}
	var resource DeviceRole
	err := ctx.RegisterResource("netbox:index/deviceRole:DeviceRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceRole gets an existing DeviceRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceRoleState, opts ...pulumi.ResourceOption) (*DeviceRole, error) {
	var resource DeviceRole
	err := ctx.ReadResource("netbox:index/deviceRole:DeviceRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceRole resources.
type deviceRoleState struct {
	ColorHex *string `pulumi:"colorHex"`
	Name     *string `pulumi:"name"`
	Slug     *string `pulumi:"slug"`
	VmRole   *bool   `pulumi:"vmRole"`
}

type DeviceRoleState struct {
	ColorHex pulumi.StringPtrInput
	Name     pulumi.StringPtrInput
	Slug     pulumi.StringPtrInput
	VmRole   pulumi.BoolPtrInput
}

func (DeviceRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceRoleState)(nil)).Elem()
}

type deviceRoleArgs struct {
	ColorHex string  `pulumi:"colorHex"`
	Name     *string `pulumi:"name"`
	Slug     *string `pulumi:"slug"`
	VmRole   *bool   `pulumi:"vmRole"`
}

// The set of arguments for constructing a DeviceRole resource.
type DeviceRoleArgs struct {
	ColorHex pulumi.StringInput
	Name     pulumi.StringPtrInput
	Slug     pulumi.StringPtrInput
	VmRole   pulumi.BoolPtrInput
}

func (DeviceRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceRoleArgs)(nil)).Elem()
}

type DeviceRoleInput interface {
	pulumi.Input

	ToDeviceRoleOutput() DeviceRoleOutput
	ToDeviceRoleOutputWithContext(ctx context.Context) DeviceRoleOutput
}

func (*DeviceRole) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceRole)(nil)).Elem()
}

func (i *DeviceRole) ToDeviceRoleOutput() DeviceRoleOutput {
	return i.ToDeviceRoleOutputWithContext(context.Background())
}

func (i *DeviceRole) ToDeviceRoleOutputWithContext(ctx context.Context) DeviceRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceRoleOutput)
}

// DeviceRoleArrayInput is an input type that accepts DeviceRoleArray and DeviceRoleArrayOutput values.
// You can construct a concrete instance of `DeviceRoleArrayInput` via:
//
//	DeviceRoleArray{ DeviceRoleArgs{...} }
type DeviceRoleArrayInput interface {
	pulumi.Input

	ToDeviceRoleArrayOutput() DeviceRoleArrayOutput
	ToDeviceRoleArrayOutputWithContext(context.Context) DeviceRoleArrayOutput
}

type DeviceRoleArray []DeviceRoleInput

func (DeviceRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceRole)(nil)).Elem()
}

func (i DeviceRoleArray) ToDeviceRoleArrayOutput() DeviceRoleArrayOutput {
	return i.ToDeviceRoleArrayOutputWithContext(context.Background())
}

func (i DeviceRoleArray) ToDeviceRoleArrayOutputWithContext(ctx context.Context) DeviceRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceRoleArrayOutput)
}

// DeviceRoleMapInput is an input type that accepts DeviceRoleMap and DeviceRoleMapOutput values.
// You can construct a concrete instance of `DeviceRoleMapInput` via:
//
//	DeviceRoleMap{ "key": DeviceRoleArgs{...} }
type DeviceRoleMapInput interface {
	pulumi.Input

	ToDeviceRoleMapOutput() DeviceRoleMapOutput
	ToDeviceRoleMapOutputWithContext(context.Context) DeviceRoleMapOutput
}

type DeviceRoleMap map[string]DeviceRoleInput

func (DeviceRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceRole)(nil)).Elem()
}

func (i DeviceRoleMap) ToDeviceRoleMapOutput() DeviceRoleMapOutput {
	return i.ToDeviceRoleMapOutputWithContext(context.Background())
}

func (i DeviceRoleMap) ToDeviceRoleMapOutputWithContext(ctx context.Context) DeviceRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceRoleMapOutput)
}

type DeviceRoleOutput struct{ *pulumi.OutputState }

func (DeviceRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceRole)(nil)).Elem()
}

func (o DeviceRoleOutput) ToDeviceRoleOutput() DeviceRoleOutput {
	return o
}

func (o DeviceRoleOutput) ToDeviceRoleOutputWithContext(ctx context.Context) DeviceRoleOutput {
	return o
}

func (o DeviceRoleOutput) ColorHex() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceRole) pulumi.StringOutput { return v.ColorHex }).(pulumi.StringOutput)
}

func (o DeviceRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DeviceRoleOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceRole) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o DeviceRoleOutput) VmRole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceRole) pulumi.BoolPtrOutput { return v.VmRole }).(pulumi.BoolPtrOutput)
}

type DeviceRoleArrayOutput struct{ *pulumi.OutputState }

func (DeviceRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceRole)(nil)).Elem()
}

func (o DeviceRoleArrayOutput) ToDeviceRoleArrayOutput() DeviceRoleArrayOutput {
	return o
}

func (o DeviceRoleArrayOutput) ToDeviceRoleArrayOutputWithContext(ctx context.Context) DeviceRoleArrayOutput {
	return o
}

func (o DeviceRoleArrayOutput) Index(i pulumi.IntInput) DeviceRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceRole {
		return vs[0].([]*DeviceRole)[vs[1].(int)]
	}).(DeviceRoleOutput)
}

type DeviceRoleMapOutput struct{ *pulumi.OutputState }

func (DeviceRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceRole)(nil)).Elem()
}

func (o DeviceRoleMapOutput) ToDeviceRoleMapOutput() DeviceRoleMapOutput {
	return o
}

func (o DeviceRoleMapOutput) ToDeviceRoleMapOutputWithContext(ctx context.Context) DeviceRoleMapOutput {
	return o
}

func (o DeviceRoleMapOutput) MapIndex(k pulumi.StringInput) DeviceRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceRole {
		return vs[0].(map[string]*DeviceRole)[vs[1].(string)]
	}).(DeviceRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceRoleInput)(nil)).Elem(), &DeviceRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceRoleArrayInput)(nil)).Elem(), DeviceRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceRoleMapInput)(nil)).Elem(), DeviceRoleMap{})
	pulumi.RegisterOutputType(DeviceRoleOutput{})
	pulumi.RegisterOutputType(DeviceRoleArrayOutput{})
	pulumi.RegisterOutputType(DeviceRoleMapOutput{})
}
