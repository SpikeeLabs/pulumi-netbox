// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource is used to define the primary IP for a given virtual machine. The primary IP is reflected in the Virtual machine Netbox UI, which identifies the Primary IPv4 and IPv6 addresses.
type PrimaryIp struct {
	pulumi.CustomResourceState

	IpAddressId      pulumi.IntOutput    `pulumi:"ipAddressId"`
	IpAddressVersion pulumi.IntPtrOutput `pulumi:"ipAddressVersion"`
	VirtualMachineId pulumi.IntOutput    `pulumi:"virtualMachineId"`
}

// NewPrimaryIp registers a new resource with the given unique name, arguments, and options.
func NewPrimaryIp(ctx *pulumi.Context,
	name string, args *PrimaryIpArgs, opts ...pulumi.ResourceOption) (*PrimaryIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpAddressId == nil {
		return nil, errors.New("invalid value for required argument 'IpAddressId'")
	}
	if args.VirtualMachineId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualMachineId'")
	}
	var resource PrimaryIp
	err := ctx.RegisterResource("netbox:index/primaryIp:PrimaryIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrimaryIp gets an existing PrimaryIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrimaryIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrimaryIpState, opts ...pulumi.ResourceOption) (*PrimaryIp, error) {
	var resource PrimaryIp
	err := ctx.ReadResource("netbox:index/primaryIp:PrimaryIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrimaryIp resources.
type primaryIpState struct {
	IpAddressId      *int `pulumi:"ipAddressId"`
	IpAddressVersion *int `pulumi:"ipAddressVersion"`
	VirtualMachineId *int `pulumi:"virtualMachineId"`
}

type PrimaryIpState struct {
	IpAddressId      pulumi.IntPtrInput
	IpAddressVersion pulumi.IntPtrInput
	VirtualMachineId pulumi.IntPtrInput
}

func (PrimaryIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*primaryIpState)(nil)).Elem()
}

type primaryIpArgs struct {
	IpAddressId      int  `pulumi:"ipAddressId"`
	IpAddressVersion *int `pulumi:"ipAddressVersion"`
	VirtualMachineId int  `pulumi:"virtualMachineId"`
}

// The set of arguments for constructing a PrimaryIp resource.
type PrimaryIpArgs struct {
	IpAddressId      pulumi.IntInput
	IpAddressVersion pulumi.IntPtrInput
	VirtualMachineId pulumi.IntInput
}

func (PrimaryIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*primaryIpArgs)(nil)).Elem()
}

type PrimaryIpInput interface {
	pulumi.Input

	ToPrimaryIpOutput() PrimaryIpOutput
	ToPrimaryIpOutputWithContext(ctx context.Context) PrimaryIpOutput
}

func (*PrimaryIp) ElementType() reflect.Type {
	return reflect.TypeOf((**PrimaryIp)(nil)).Elem()
}

func (i *PrimaryIp) ToPrimaryIpOutput() PrimaryIpOutput {
	return i.ToPrimaryIpOutputWithContext(context.Background())
}

func (i *PrimaryIp) ToPrimaryIpOutputWithContext(ctx context.Context) PrimaryIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryIpOutput)
}

// PrimaryIpArrayInput is an input type that accepts PrimaryIpArray and PrimaryIpArrayOutput values.
// You can construct a concrete instance of `PrimaryIpArrayInput` via:
//
//	PrimaryIpArray{ PrimaryIpArgs{...} }
type PrimaryIpArrayInput interface {
	pulumi.Input

	ToPrimaryIpArrayOutput() PrimaryIpArrayOutput
	ToPrimaryIpArrayOutputWithContext(context.Context) PrimaryIpArrayOutput
}

type PrimaryIpArray []PrimaryIpInput

func (PrimaryIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrimaryIp)(nil)).Elem()
}

func (i PrimaryIpArray) ToPrimaryIpArrayOutput() PrimaryIpArrayOutput {
	return i.ToPrimaryIpArrayOutputWithContext(context.Background())
}

func (i PrimaryIpArray) ToPrimaryIpArrayOutputWithContext(ctx context.Context) PrimaryIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryIpArrayOutput)
}

// PrimaryIpMapInput is an input type that accepts PrimaryIpMap and PrimaryIpMapOutput values.
// You can construct a concrete instance of `PrimaryIpMapInput` via:
//
//	PrimaryIpMap{ "key": PrimaryIpArgs{...} }
type PrimaryIpMapInput interface {
	pulumi.Input

	ToPrimaryIpMapOutput() PrimaryIpMapOutput
	ToPrimaryIpMapOutputWithContext(context.Context) PrimaryIpMapOutput
}

type PrimaryIpMap map[string]PrimaryIpInput

func (PrimaryIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrimaryIp)(nil)).Elem()
}

func (i PrimaryIpMap) ToPrimaryIpMapOutput() PrimaryIpMapOutput {
	return i.ToPrimaryIpMapOutputWithContext(context.Background())
}

func (i PrimaryIpMap) ToPrimaryIpMapOutputWithContext(ctx context.Context) PrimaryIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryIpMapOutput)
}

type PrimaryIpOutput struct{ *pulumi.OutputState }

func (PrimaryIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrimaryIp)(nil)).Elem()
}

func (o PrimaryIpOutput) ToPrimaryIpOutput() PrimaryIpOutput {
	return o
}

func (o PrimaryIpOutput) ToPrimaryIpOutputWithContext(ctx context.Context) PrimaryIpOutput {
	return o
}

func (o PrimaryIpOutput) IpAddressId() pulumi.IntOutput {
	return o.ApplyT(func(v *PrimaryIp) pulumi.IntOutput { return v.IpAddressId }).(pulumi.IntOutput)
}

func (o PrimaryIpOutput) IpAddressVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PrimaryIp) pulumi.IntPtrOutput { return v.IpAddressVersion }).(pulumi.IntPtrOutput)
}

func (o PrimaryIpOutput) VirtualMachineId() pulumi.IntOutput {
	return o.ApplyT(func(v *PrimaryIp) pulumi.IntOutput { return v.VirtualMachineId }).(pulumi.IntOutput)
}

type PrimaryIpArrayOutput struct{ *pulumi.OutputState }

func (PrimaryIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrimaryIp)(nil)).Elem()
}

func (o PrimaryIpArrayOutput) ToPrimaryIpArrayOutput() PrimaryIpArrayOutput {
	return o
}

func (o PrimaryIpArrayOutput) ToPrimaryIpArrayOutputWithContext(ctx context.Context) PrimaryIpArrayOutput {
	return o
}

func (o PrimaryIpArrayOutput) Index(i pulumi.IntInput) PrimaryIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrimaryIp {
		return vs[0].([]*PrimaryIp)[vs[1].(int)]
	}).(PrimaryIpOutput)
}

type PrimaryIpMapOutput struct{ *pulumi.OutputState }

func (PrimaryIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrimaryIp)(nil)).Elem()
}

func (o PrimaryIpMapOutput) ToPrimaryIpMapOutput() PrimaryIpMapOutput {
	return o
}

func (o PrimaryIpMapOutput) ToPrimaryIpMapOutputWithContext(ctx context.Context) PrimaryIpMapOutput {
	return o
}

func (o PrimaryIpMapOutput) MapIndex(k pulumi.StringInput) PrimaryIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrimaryIp {
		return vs[0].(map[string]*PrimaryIp)[vs[1].(string)]
	}).(PrimaryIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryIpInput)(nil)).Elem(), &PrimaryIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryIpArrayInput)(nil)).Elem(), PrimaryIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryIpMapInput)(nil)).Elem(), PrimaryIpMap{})
	pulumi.RegisterOutputType(PrimaryIpOutput{})
	pulumi.RegisterOutputType(PrimaryIpArrayOutput{})
	pulumi.RegisterOutputType(PrimaryIpMapOutput{})
}
