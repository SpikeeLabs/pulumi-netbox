// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/devices/#devices):
//
// > Every piece of hardware which is installed within a site or rack exists in NetBox as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.
type Device struct {
	pulumi.CustomResourceState

	Comments     pulumi.StringPtrOutput   `pulumi:"comments"`
	DeviceTypeId pulumi.IntOutput         `pulumi:"deviceTypeId"`
	Name         pulumi.StringOutput      `pulumi:"name"`
	PrimaryIpv4  pulumi.IntOutput         `pulumi:"primaryIpv4"`
	RoleId       pulumi.IntPtrOutput      `pulumi:"roleId"`
	Serial       pulumi.StringPtrOutput   `pulumi:"serial"`
	SiteId       pulumi.IntPtrOutput      `pulumi:"siteId"`
	Tags         pulumi.StringArrayOutput `pulumi:"tags"`
	TenantId     pulumi.IntPtrOutput      `pulumi:"tenantId"`
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOption) (*Device, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceTypeId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypeId'")
	}
	var resource Device
	err := ctx.RegisterResource("netbox:index/device:Device", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceState, opts ...pulumi.ResourceOption) (*Device, error) {
	var resource Device
	err := ctx.ReadResource("netbox:index/device:Device", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Device resources.
type deviceState struct {
	Comments     *string  `pulumi:"comments"`
	DeviceTypeId *int     `pulumi:"deviceTypeId"`
	Name         *string  `pulumi:"name"`
	PrimaryIpv4  *int     `pulumi:"primaryIpv4"`
	RoleId       *int     `pulumi:"roleId"`
	Serial       *string  `pulumi:"serial"`
	SiteId       *int     `pulumi:"siteId"`
	Tags         []string `pulumi:"tags"`
	TenantId     *int     `pulumi:"tenantId"`
}

type DeviceState struct {
	Comments     pulumi.StringPtrInput
	DeviceTypeId pulumi.IntPtrInput
	Name         pulumi.StringPtrInput
	PrimaryIpv4  pulumi.IntPtrInput
	RoleId       pulumi.IntPtrInput
	Serial       pulumi.StringPtrInput
	SiteId       pulumi.IntPtrInput
	Tags         pulumi.StringArrayInput
	TenantId     pulumi.IntPtrInput
}

func (DeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceState)(nil)).Elem()
}

type deviceArgs struct {
	Comments     *string  `pulumi:"comments"`
	DeviceTypeId int      `pulumi:"deviceTypeId"`
	Name         *string  `pulumi:"name"`
	RoleId       *int     `pulumi:"roleId"`
	Serial       *string  `pulumi:"serial"`
	SiteId       *int     `pulumi:"siteId"`
	Tags         []string `pulumi:"tags"`
	TenantId     *int     `pulumi:"tenantId"`
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	Comments     pulumi.StringPtrInput
	DeviceTypeId pulumi.IntInput
	Name         pulumi.StringPtrInput
	RoleId       pulumi.IntPtrInput
	Serial       pulumi.StringPtrInput
	SiteId       pulumi.IntPtrInput
	Tags         pulumi.StringArrayInput
	TenantId     pulumi.IntPtrInput
}

func (DeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceArgs)(nil)).Elem()
}

type DeviceInput interface {
	pulumi.Input

	ToDeviceOutput() DeviceOutput
	ToDeviceOutputWithContext(ctx context.Context) DeviceOutput
}

func (*Device) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (i *Device) ToDeviceOutput() DeviceOutput {
	return i.ToDeviceOutputWithContext(context.Background())
}

func (i *Device) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceOutput)
}

// DeviceArrayInput is an input type that accepts DeviceArray and DeviceArrayOutput values.
// You can construct a concrete instance of `DeviceArrayInput` via:
//
//	DeviceArray{ DeviceArgs{...} }
type DeviceArrayInput interface {
	pulumi.Input

	ToDeviceArrayOutput() DeviceArrayOutput
	ToDeviceArrayOutputWithContext(context.Context) DeviceArrayOutput
}

type DeviceArray []DeviceInput

func (DeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (i DeviceArray) ToDeviceArrayOutput() DeviceArrayOutput {
	return i.ToDeviceArrayOutputWithContext(context.Background())
}

func (i DeviceArray) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceArrayOutput)
}

// DeviceMapInput is an input type that accepts DeviceMap and DeviceMapOutput values.
// You can construct a concrete instance of `DeviceMapInput` via:
//
//	DeviceMap{ "key": DeviceArgs{...} }
type DeviceMapInput interface {
	pulumi.Input

	ToDeviceMapOutput() DeviceMapOutput
	ToDeviceMapOutputWithContext(context.Context) DeviceMapOutput
}

type DeviceMap map[string]DeviceInput

func (DeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (i DeviceMap) ToDeviceMapOutput() DeviceMapOutput {
	return i.ToDeviceMapOutputWithContext(context.Background())
}

func (i DeviceMap) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMapOutput)
}

type DeviceOutput struct{ *pulumi.OutputState }

func (DeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (o DeviceOutput) ToDeviceOutput() DeviceOutput {
	return o
}

func (o DeviceOutput) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return o
}

func (o DeviceOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o DeviceOutput) DeviceTypeId() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.DeviceTypeId }).(pulumi.IntOutput)
}

func (o DeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DeviceOutput) PrimaryIpv4() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.PrimaryIpv4 }).(pulumi.IntOutput)
}

func (o DeviceOutput) RoleId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.RoleId }).(pulumi.IntPtrOutput)
}

func (o DeviceOutput) Serial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.Serial }).(pulumi.StringPtrOutput)
}

func (o DeviceOutput) SiteId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.SiteId }).(pulumi.IntPtrOutput)
}

func (o DeviceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Device) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o DeviceOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.TenantId }).(pulumi.IntPtrOutput)
}

type DeviceArrayOutput struct{ *pulumi.OutputState }

func (DeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (o DeviceArrayOutput) ToDeviceArrayOutput() DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) Index(i pulumi.IntInput) DeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Device {
		return vs[0].([]*Device)[vs[1].(int)]
	}).(DeviceOutput)
}

type DeviceMapOutput struct{ *pulumi.OutputState }

func (DeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (o DeviceMapOutput) ToDeviceMapOutput() DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) MapIndex(k pulumi.StringInput) DeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Device {
		return vs[0].(map[string]*Device)[vs[1].(string)]
	}).(DeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInput)(nil)).Elem(), &Device{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceArrayInput)(nil)).Elem(), DeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMapInput)(nil)).Elem(), DeviceMap{})
	pulumi.RegisterOutputType(DeviceOutput{})
	pulumi.RegisterOutputType(DeviceArrayOutput{})
	pulumi.RegisterOutputType(DeviceMapOutput{})
}
