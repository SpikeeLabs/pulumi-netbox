// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Region struct {
	pulumi.CustomResourceState

	Description    pulumi.StringPtrOutput `pulumi:"description"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	ParentRegionId pulumi.IntPtrOutput    `pulumi:"parentRegionId"`
	Slug           pulumi.StringOutput    `pulumi:"slug"`
}

// NewRegion registers a new resource with the given unique name, arguments, and options.
func NewRegion(ctx *pulumi.Context,
	name string, args *RegionArgs, opts ...pulumi.ResourceOption) (*Region, error) {
	if args == nil {
		args = &RegionArgs{}
	}

	var resource Region
	err := ctx.RegisterResource("netbox:index/region:Region", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegion gets an existing Region resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionState, opts ...pulumi.ResourceOption) (*Region, error) {
	var resource Region
	err := ctx.ReadResource("netbox:index/region:Region", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Region resources.
type regionState struct {
	Description    *string `pulumi:"description"`
	Name           *string `pulumi:"name"`
	ParentRegionId *int    `pulumi:"parentRegionId"`
	Slug           *string `pulumi:"slug"`
}

type RegionState struct {
	Description    pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	ParentRegionId pulumi.IntPtrInput
	Slug           pulumi.StringPtrInput
}

func (RegionState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionState)(nil)).Elem()
}

type regionArgs struct {
	Description    *string `pulumi:"description"`
	Name           *string `pulumi:"name"`
	ParentRegionId *int    `pulumi:"parentRegionId"`
	Slug           *string `pulumi:"slug"`
}

// The set of arguments for constructing a Region resource.
type RegionArgs struct {
	Description    pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	ParentRegionId pulumi.IntPtrInput
	Slug           pulumi.StringPtrInput
}

func (RegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionArgs)(nil)).Elem()
}

type RegionInput interface {
	pulumi.Input

	ToRegionOutput() RegionOutput
	ToRegionOutputWithContext(ctx context.Context) RegionOutput
}

func (*Region) ElementType() reflect.Type {
	return reflect.TypeOf((**Region)(nil)).Elem()
}

func (i *Region) ToRegionOutput() RegionOutput {
	return i.ToRegionOutputWithContext(context.Background())
}

func (i *Region) ToRegionOutputWithContext(ctx context.Context) RegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionOutput)
}

// RegionArrayInput is an input type that accepts RegionArray and RegionArrayOutput values.
// You can construct a concrete instance of `RegionArrayInput` via:
//
//	RegionArray{ RegionArgs{...} }
type RegionArrayInput interface {
	pulumi.Input

	ToRegionArrayOutput() RegionArrayOutput
	ToRegionArrayOutputWithContext(context.Context) RegionArrayOutput
}

type RegionArray []RegionInput

func (RegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Region)(nil)).Elem()
}

func (i RegionArray) ToRegionArrayOutput() RegionArrayOutput {
	return i.ToRegionArrayOutputWithContext(context.Background())
}

func (i RegionArray) ToRegionArrayOutputWithContext(ctx context.Context) RegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionArrayOutput)
}

// RegionMapInput is an input type that accepts RegionMap and RegionMapOutput values.
// You can construct a concrete instance of `RegionMapInput` via:
//
//	RegionMap{ "key": RegionArgs{...} }
type RegionMapInput interface {
	pulumi.Input

	ToRegionMapOutput() RegionMapOutput
	ToRegionMapOutputWithContext(context.Context) RegionMapOutput
}

type RegionMap map[string]RegionInput

func (RegionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Region)(nil)).Elem()
}

func (i RegionMap) ToRegionMapOutput() RegionMapOutput {
	return i.ToRegionMapOutputWithContext(context.Background())
}

func (i RegionMap) ToRegionMapOutputWithContext(ctx context.Context) RegionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionMapOutput)
}

type RegionOutput struct{ *pulumi.OutputState }

func (RegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Region)(nil)).Elem()
}

func (o RegionOutput) ToRegionOutput() RegionOutput {
	return o
}

func (o RegionOutput) ToRegionOutputWithContext(ctx context.Context) RegionOutput {
	return o
}

func (o RegionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Region) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Region) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RegionOutput) ParentRegionId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Region) pulumi.IntPtrOutput { return v.ParentRegionId }).(pulumi.IntPtrOutput)
}

func (o RegionOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Region) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type RegionArrayOutput struct{ *pulumi.OutputState }

func (RegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Region)(nil)).Elem()
}

func (o RegionArrayOutput) ToRegionArrayOutput() RegionArrayOutput {
	return o
}

func (o RegionArrayOutput) ToRegionArrayOutputWithContext(ctx context.Context) RegionArrayOutput {
	return o
}

func (o RegionArrayOutput) Index(i pulumi.IntInput) RegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Region {
		return vs[0].([]*Region)[vs[1].(int)]
	}).(RegionOutput)
}

type RegionMapOutput struct{ *pulumi.OutputState }

func (RegionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Region)(nil)).Elem()
}

func (o RegionMapOutput) ToRegionMapOutput() RegionMapOutput {
	return o
}

func (o RegionMapOutput) ToRegionMapOutputWithContext(ctx context.Context) RegionMapOutput {
	return o
}

func (o RegionMapOutput) MapIndex(k pulumi.StringInput) RegionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Region {
		return vs[0].(map[string]*Region)[vs[1].(string)]
	}).(RegionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionInput)(nil)).Elem(), &Region{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionArrayInput)(nil)).Elem(), RegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionMapInput)(nil)).Elem(), RegionMap{})
	pulumi.RegisterOutputType(RegionOutput{})
	pulumi.RegisterOutputType(RegionArrayOutput{})
	pulumi.RegisterOutputType(RegionMapOutput{})
}
