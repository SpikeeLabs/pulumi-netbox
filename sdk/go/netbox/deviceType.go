// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DeviceType struct {
	pulumi.CustomResourceState

	ManufacturerId pulumi.IntPtrOutput      `pulumi:"manufacturerId"`
	Model          pulumi.StringOutput      `pulumi:"model"`
	PartNumber     pulumi.StringPtrOutput   `pulumi:"partNumber"`
	Slug           pulumi.StringOutput      `pulumi:"slug"`
	Tags           pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewDeviceType registers a new resource with the given unique name, arguments, and options.
func NewDeviceType(ctx *pulumi.Context,
	name string, args *DeviceTypeArgs, opts ...pulumi.ResourceOption) (*DeviceType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Model == nil {
		return nil, errors.New("invalid value for required argument 'Model'")
	}
	var resource DeviceType
	err := ctx.RegisterResource("netbox:index/deviceType:DeviceType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceType gets an existing DeviceType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceTypeState, opts ...pulumi.ResourceOption) (*DeviceType, error) {
	var resource DeviceType
	err := ctx.ReadResource("netbox:index/deviceType:DeviceType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceType resources.
type deviceTypeState struct {
	ManufacturerId *int     `pulumi:"manufacturerId"`
	Model          *string  `pulumi:"model"`
	PartNumber     *string  `pulumi:"partNumber"`
	Slug           *string  `pulumi:"slug"`
	Tags           []string `pulumi:"tags"`
}

type DeviceTypeState struct {
	ManufacturerId pulumi.IntPtrInput
	Model          pulumi.StringPtrInput
	PartNumber     pulumi.StringPtrInput
	Slug           pulumi.StringPtrInput
	Tags           pulumi.StringArrayInput
}

func (DeviceTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceTypeState)(nil)).Elem()
}

type deviceTypeArgs struct {
	ManufacturerId *int     `pulumi:"manufacturerId"`
	Model          string   `pulumi:"model"`
	PartNumber     *string  `pulumi:"partNumber"`
	Slug           *string  `pulumi:"slug"`
	Tags           []string `pulumi:"tags"`
}

// The set of arguments for constructing a DeviceType resource.
type DeviceTypeArgs struct {
	ManufacturerId pulumi.IntPtrInput
	Model          pulumi.StringInput
	PartNumber     pulumi.StringPtrInput
	Slug           pulumi.StringPtrInput
	Tags           pulumi.StringArrayInput
}

func (DeviceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceTypeArgs)(nil)).Elem()
}

type DeviceTypeInput interface {
	pulumi.Input

	ToDeviceTypeOutput() DeviceTypeOutput
	ToDeviceTypeOutputWithContext(ctx context.Context) DeviceTypeOutput
}

func (*DeviceType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceType)(nil)).Elem()
}

func (i *DeviceType) ToDeviceTypeOutput() DeviceTypeOutput {
	return i.ToDeviceTypeOutputWithContext(context.Background())
}

func (i *DeviceType) ToDeviceTypeOutputWithContext(ctx context.Context) DeviceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTypeOutput)
}

// DeviceTypeArrayInput is an input type that accepts DeviceTypeArray and DeviceTypeArrayOutput values.
// You can construct a concrete instance of `DeviceTypeArrayInput` via:
//
//	DeviceTypeArray{ DeviceTypeArgs{...} }
type DeviceTypeArrayInput interface {
	pulumi.Input

	ToDeviceTypeArrayOutput() DeviceTypeArrayOutput
	ToDeviceTypeArrayOutputWithContext(context.Context) DeviceTypeArrayOutput
}

type DeviceTypeArray []DeviceTypeInput

func (DeviceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceType)(nil)).Elem()
}

func (i DeviceTypeArray) ToDeviceTypeArrayOutput() DeviceTypeArrayOutput {
	return i.ToDeviceTypeArrayOutputWithContext(context.Background())
}

func (i DeviceTypeArray) ToDeviceTypeArrayOutputWithContext(ctx context.Context) DeviceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTypeArrayOutput)
}

// DeviceTypeMapInput is an input type that accepts DeviceTypeMap and DeviceTypeMapOutput values.
// You can construct a concrete instance of `DeviceTypeMapInput` via:
//
//	DeviceTypeMap{ "key": DeviceTypeArgs{...} }
type DeviceTypeMapInput interface {
	pulumi.Input

	ToDeviceTypeMapOutput() DeviceTypeMapOutput
	ToDeviceTypeMapOutputWithContext(context.Context) DeviceTypeMapOutput
}

type DeviceTypeMap map[string]DeviceTypeInput

func (DeviceTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceType)(nil)).Elem()
}

func (i DeviceTypeMap) ToDeviceTypeMapOutput() DeviceTypeMapOutput {
	return i.ToDeviceTypeMapOutputWithContext(context.Background())
}

func (i DeviceTypeMap) ToDeviceTypeMapOutputWithContext(ctx context.Context) DeviceTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTypeMapOutput)
}

type DeviceTypeOutput struct{ *pulumi.OutputState }

func (DeviceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceType)(nil)).Elem()
}

func (o DeviceTypeOutput) ToDeviceTypeOutput() DeviceTypeOutput {
	return o
}

func (o DeviceTypeOutput) ToDeviceTypeOutputWithContext(ctx context.Context) DeviceTypeOutput {
	return o
}

func (o DeviceTypeOutput) ManufacturerId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.IntPtrOutput { return v.ManufacturerId }).(pulumi.IntPtrOutput)
}

func (o DeviceTypeOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.StringOutput { return v.Model }).(pulumi.StringOutput)
}

func (o DeviceTypeOutput) PartNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.StringPtrOutput { return v.PartNumber }).(pulumi.StringPtrOutput)
}

func (o DeviceTypeOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o DeviceTypeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type DeviceTypeArrayOutput struct{ *pulumi.OutputState }

func (DeviceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceType)(nil)).Elem()
}

func (o DeviceTypeArrayOutput) ToDeviceTypeArrayOutput() DeviceTypeArrayOutput {
	return o
}

func (o DeviceTypeArrayOutput) ToDeviceTypeArrayOutputWithContext(ctx context.Context) DeviceTypeArrayOutput {
	return o
}

func (o DeviceTypeArrayOutput) Index(i pulumi.IntInput) DeviceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceType {
		return vs[0].([]*DeviceType)[vs[1].(int)]
	}).(DeviceTypeOutput)
}

type DeviceTypeMapOutput struct{ *pulumi.OutputState }

func (DeviceTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceType)(nil)).Elem()
}

func (o DeviceTypeMapOutput) ToDeviceTypeMapOutput() DeviceTypeMapOutput {
	return o
}

func (o DeviceTypeMapOutput) ToDeviceTypeMapOutputWithContext(ctx context.Context) DeviceTypeMapOutput {
	return o
}

func (o DeviceTypeMapOutput) MapIndex(k pulumi.StringInput) DeviceTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceType {
		return vs[0].(map[string]*DeviceType)[vs[1].(string)]
	}).(DeviceTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTypeInput)(nil)).Elem(), &DeviceType{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTypeArrayInput)(nil)).Elem(), DeviceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTypeMapInput)(nil)).Elem(), DeviceTypeMap{})
	pulumi.RegisterOutputType(DeviceTypeOutput{})
	pulumi.RegisterOutputType(DeviceTypeArrayOutput{})
	pulumi.RegisterOutputType(DeviceTypeMapOutput{})
}
