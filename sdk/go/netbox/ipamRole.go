// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpamRole struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	Slug        pulumi.StringOutput    `pulumi:"slug"`
	Weight      pulumi.IntPtrOutput    `pulumi:"weight"`
}

// NewIpamRole registers a new resource with the given unique name, arguments, and options.
func NewIpamRole(ctx *pulumi.Context,
	name string, args *IpamRoleArgs, opts ...pulumi.ResourceOption) (*IpamRole, error) {
	if args == nil {
		args = &IpamRoleArgs{}
	}

	var resource IpamRole
	err := ctx.RegisterResource("netbox:index/ipamRole:IpamRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpamRole gets an existing IpamRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpamRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpamRoleState, opts ...pulumi.ResourceOption) (*IpamRole, error) {
	var resource IpamRole
	err := ctx.ReadResource("netbox:index/ipamRole:IpamRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpamRole resources.
type ipamRoleState struct {
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
	Slug        *string `pulumi:"slug"`
	Weight      *int    `pulumi:"weight"`
}

type IpamRoleState struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Slug        pulumi.StringPtrInput
	Weight      pulumi.IntPtrInput
}

func (IpamRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamRoleState)(nil)).Elem()
}

type ipamRoleArgs struct {
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
	Slug        *string `pulumi:"slug"`
	Weight      *int    `pulumi:"weight"`
}

// The set of arguments for constructing a IpamRole resource.
type IpamRoleArgs struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Slug        pulumi.StringPtrInput
	Weight      pulumi.IntPtrInput
}

func (IpamRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamRoleArgs)(nil)).Elem()
}

type IpamRoleInput interface {
	pulumi.Input

	ToIpamRoleOutput() IpamRoleOutput
	ToIpamRoleOutputWithContext(ctx context.Context) IpamRoleOutput
}

func (*IpamRole) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamRole)(nil)).Elem()
}

func (i *IpamRole) ToIpamRoleOutput() IpamRoleOutput {
	return i.ToIpamRoleOutputWithContext(context.Background())
}

func (i *IpamRole) ToIpamRoleOutputWithContext(ctx context.Context) IpamRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamRoleOutput)
}

// IpamRoleArrayInput is an input type that accepts IpamRoleArray and IpamRoleArrayOutput values.
// You can construct a concrete instance of `IpamRoleArrayInput` via:
//
//	IpamRoleArray{ IpamRoleArgs{...} }
type IpamRoleArrayInput interface {
	pulumi.Input

	ToIpamRoleArrayOutput() IpamRoleArrayOutput
	ToIpamRoleArrayOutputWithContext(context.Context) IpamRoleArrayOutput
}

type IpamRoleArray []IpamRoleInput

func (IpamRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpamRole)(nil)).Elem()
}

func (i IpamRoleArray) ToIpamRoleArrayOutput() IpamRoleArrayOutput {
	return i.ToIpamRoleArrayOutputWithContext(context.Background())
}

func (i IpamRoleArray) ToIpamRoleArrayOutputWithContext(ctx context.Context) IpamRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamRoleArrayOutput)
}

// IpamRoleMapInput is an input type that accepts IpamRoleMap and IpamRoleMapOutput values.
// You can construct a concrete instance of `IpamRoleMapInput` via:
//
//	IpamRoleMap{ "key": IpamRoleArgs{...} }
type IpamRoleMapInput interface {
	pulumi.Input

	ToIpamRoleMapOutput() IpamRoleMapOutput
	ToIpamRoleMapOutputWithContext(context.Context) IpamRoleMapOutput
}

type IpamRoleMap map[string]IpamRoleInput

func (IpamRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpamRole)(nil)).Elem()
}

func (i IpamRoleMap) ToIpamRoleMapOutput() IpamRoleMapOutput {
	return i.ToIpamRoleMapOutputWithContext(context.Background())
}

func (i IpamRoleMap) ToIpamRoleMapOutputWithContext(ctx context.Context) IpamRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamRoleMapOutput)
}

type IpamRoleOutput struct{ *pulumi.OutputState }

func (IpamRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamRole)(nil)).Elem()
}

func (o IpamRoleOutput) ToIpamRoleOutput() IpamRoleOutput {
	return o
}

func (o IpamRoleOutput) ToIpamRoleOutputWithContext(ctx context.Context) IpamRoleOutput {
	return o
}

func (o IpamRoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpamRole) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o IpamRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IpamRoleOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamRole) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o IpamRoleOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpamRole) pulumi.IntPtrOutput { return v.Weight }).(pulumi.IntPtrOutput)
}

type IpamRoleArrayOutput struct{ *pulumi.OutputState }

func (IpamRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpamRole)(nil)).Elem()
}

func (o IpamRoleArrayOutput) ToIpamRoleArrayOutput() IpamRoleArrayOutput {
	return o
}

func (o IpamRoleArrayOutput) ToIpamRoleArrayOutputWithContext(ctx context.Context) IpamRoleArrayOutput {
	return o
}

func (o IpamRoleArrayOutput) Index(i pulumi.IntInput) IpamRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpamRole {
		return vs[0].([]*IpamRole)[vs[1].(int)]
	}).(IpamRoleOutput)
}

type IpamRoleMapOutput struct{ *pulumi.OutputState }

func (IpamRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpamRole)(nil)).Elem()
}

func (o IpamRoleMapOutput) ToIpamRoleMapOutput() IpamRoleMapOutput {
	return o
}

func (o IpamRoleMapOutput) ToIpamRoleMapOutputWithContext(ctx context.Context) IpamRoleMapOutput {
	return o
}

func (o IpamRoleMapOutput) MapIndex(k pulumi.StringInput) IpamRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpamRole {
		return vs[0].(map[string]*IpamRole)[vs[1].(string)]
	}).(IpamRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpamRoleInput)(nil)).Elem(), &IpamRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpamRoleArrayInput)(nil)).Elem(), IpamRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpamRoleMapInput)(nil)).Elem(), IpamRoleMap{})
	pulumi.RegisterOutputType(IpamRoleOutput{})
	pulumi.RegisterOutputType(IpamRoleArrayOutput{})
	pulumi.RegisterOutputType(IpamRoleMapOutput{})
}
