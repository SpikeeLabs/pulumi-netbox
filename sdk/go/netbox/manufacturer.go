// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Manufacturer struct {
	pulumi.CustomResourceState

	Name pulumi.StringOutput `pulumi:"name"`
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewManufacturer registers a new resource with the given unique name, arguments, and options.
func NewManufacturer(ctx *pulumi.Context,
	name string, args *ManufacturerArgs, opts ...pulumi.ResourceOption) (*Manufacturer, error) {
	if args == nil {
		args = &ManufacturerArgs{}
	}

	var resource Manufacturer
	err := ctx.RegisterResource("netbox:index/manufacturer:Manufacturer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManufacturer gets an existing Manufacturer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManufacturer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManufacturerState, opts ...pulumi.ResourceOption) (*Manufacturer, error) {
	var resource Manufacturer
	err := ctx.ReadResource("netbox:index/manufacturer:Manufacturer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Manufacturer resources.
type manufacturerState struct {
	Name *string `pulumi:"name"`
	Slug *string `pulumi:"slug"`
}

type ManufacturerState struct {
	Name pulumi.StringPtrInput
	Slug pulumi.StringPtrInput
}

func (ManufacturerState) ElementType() reflect.Type {
	return reflect.TypeOf((*manufacturerState)(nil)).Elem()
}

type manufacturerArgs struct {
	Name *string `pulumi:"name"`
	Slug *string `pulumi:"slug"`
}

// The set of arguments for constructing a Manufacturer resource.
type ManufacturerArgs struct {
	Name pulumi.StringPtrInput
	Slug pulumi.StringPtrInput
}

func (ManufacturerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*manufacturerArgs)(nil)).Elem()
}

type ManufacturerInput interface {
	pulumi.Input

	ToManufacturerOutput() ManufacturerOutput
	ToManufacturerOutputWithContext(ctx context.Context) ManufacturerOutput
}

func (*Manufacturer) ElementType() reflect.Type {
	return reflect.TypeOf((**Manufacturer)(nil)).Elem()
}

func (i *Manufacturer) ToManufacturerOutput() ManufacturerOutput {
	return i.ToManufacturerOutputWithContext(context.Background())
}

func (i *Manufacturer) ToManufacturerOutputWithContext(ctx context.Context) ManufacturerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManufacturerOutput)
}

// ManufacturerArrayInput is an input type that accepts ManufacturerArray and ManufacturerArrayOutput values.
// You can construct a concrete instance of `ManufacturerArrayInput` via:
//
//	ManufacturerArray{ ManufacturerArgs{...} }
type ManufacturerArrayInput interface {
	pulumi.Input

	ToManufacturerArrayOutput() ManufacturerArrayOutput
	ToManufacturerArrayOutputWithContext(context.Context) ManufacturerArrayOutput
}

type ManufacturerArray []ManufacturerInput

func (ManufacturerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Manufacturer)(nil)).Elem()
}

func (i ManufacturerArray) ToManufacturerArrayOutput() ManufacturerArrayOutput {
	return i.ToManufacturerArrayOutputWithContext(context.Background())
}

func (i ManufacturerArray) ToManufacturerArrayOutputWithContext(ctx context.Context) ManufacturerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManufacturerArrayOutput)
}

// ManufacturerMapInput is an input type that accepts ManufacturerMap and ManufacturerMapOutput values.
// You can construct a concrete instance of `ManufacturerMapInput` via:
//
//	ManufacturerMap{ "key": ManufacturerArgs{...} }
type ManufacturerMapInput interface {
	pulumi.Input

	ToManufacturerMapOutput() ManufacturerMapOutput
	ToManufacturerMapOutputWithContext(context.Context) ManufacturerMapOutput
}

type ManufacturerMap map[string]ManufacturerInput

func (ManufacturerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Manufacturer)(nil)).Elem()
}

func (i ManufacturerMap) ToManufacturerMapOutput() ManufacturerMapOutput {
	return i.ToManufacturerMapOutputWithContext(context.Background())
}

func (i ManufacturerMap) ToManufacturerMapOutputWithContext(ctx context.Context) ManufacturerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManufacturerMapOutput)
}

type ManufacturerOutput struct{ *pulumi.OutputState }

func (ManufacturerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Manufacturer)(nil)).Elem()
}

func (o ManufacturerOutput) ToManufacturerOutput() ManufacturerOutput {
	return o
}

func (o ManufacturerOutput) ToManufacturerOutputWithContext(ctx context.Context) ManufacturerOutput {
	return o
}

func (o ManufacturerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Manufacturer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ManufacturerOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Manufacturer) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type ManufacturerArrayOutput struct{ *pulumi.OutputState }

func (ManufacturerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Manufacturer)(nil)).Elem()
}

func (o ManufacturerArrayOutput) ToManufacturerArrayOutput() ManufacturerArrayOutput {
	return o
}

func (o ManufacturerArrayOutput) ToManufacturerArrayOutputWithContext(ctx context.Context) ManufacturerArrayOutput {
	return o
}

func (o ManufacturerArrayOutput) Index(i pulumi.IntInput) ManufacturerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Manufacturer {
		return vs[0].([]*Manufacturer)[vs[1].(int)]
	}).(ManufacturerOutput)
}

type ManufacturerMapOutput struct{ *pulumi.OutputState }

func (ManufacturerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Manufacturer)(nil)).Elem()
}

func (o ManufacturerMapOutput) ToManufacturerMapOutput() ManufacturerMapOutput {
	return o
}

func (o ManufacturerMapOutput) ToManufacturerMapOutputWithContext(ctx context.Context) ManufacturerMapOutput {
	return o
}

func (o ManufacturerMapOutput) MapIndex(k pulumi.StringInput) ManufacturerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Manufacturer {
		return vs[0].(map[string]*Manufacturer)[vs[1].(string)]
	}).(ManufacturerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManufacturerInput)(nil)).Elem(), &Manufacturer{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManufacturerArrayInput)(nil)).Elem(), ManufacturerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManufacturerMapInput)(nil)).Elem(), ManufacturerMap{})
	pulumi.RegisterOutputType(ManufacturerOutput{})
	pulumi.RegisterOutputType(ManufacturerArrayOutput{})
	pulumi.RegisterOutputType(ManufacturerMapOutput{})
}
