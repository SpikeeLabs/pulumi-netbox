// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/hbjydev/pulumi-netbox/sdk/go/netbox"
//	"github.com/pulumi/pulumi-netbox/sdk/go/netbox"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testPrefix, err := netbox.LookupPrefix(ctx, &GetPrefixArgs{
//				Cidr: "10.0.0.0/24",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = netbox.NewAvailablePrefix(ctx, "testAvailablePrefix", &netbox.AvailablePrefixArgs{
//				ParentPrefixId: pulumi.Int(testPrefix.Id),
//				PrefixLength:   pulumi.Int(25),
//				Status:         pulumi.String("active"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AvailablePrefix struct {
	pulumi.CustomResourceState

	Description    pulumi.StringPtrOutput   `pulumi:"description"`
	IsPool         pulumi.BoolPtrOutput     `pulumi:"isPool"`
	MarkUtilized   pulumi.BoolPtrOutput     `pulumi:"markUtilized"`
	ParentPrefixId pulumi.IntOutput         `pulumi:"parentPrefixId"`
	Prefix         pulumi.StringOutput      `pulumi:"prefix"`
	PrefixLength   pulumi.IntOutput         `pulumi:"prefixLength"`
	RoleId         pulumi.IntPtrOutput      `pulumi:"roleId"`
	SiteId         pulumi.IntPtrOutput      `pulumi:"siteId"`
	Status         pulumi.StringOutput      `pulumi:"status"`
	Tags           pulumi.StringArrayOutput `pulumi:"tags"`
	TenantId       pulumi.IntPtrOutput      `pulumi:"tenantId"`
	VlanId         pulumi.IntPtrOutput      `pulumi:"vlanId"`
	VrfId          pulumi.IntPtrOutput      `pulumi:"vrfId"`
}

// NewAvailablePrefix registers a new resource with the given unique name, arguments, and options.
func NewAvailablePrefix(ctx *pulumi.Context,
	name string, args *AvailablePrefixArgs, opts ...pulumi.ResourceOption) (*AvailablePrefix, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ParentPrefixId == nil {
		return nil, errors.New("invalid value for required argument 'ParentPrefixId'")
	}
	if args.PrefixLength == nil {
		return nil, errors.New("invalid value for required argument 'PrefixLength'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	var resource AvailablePrefix
	err := ctx.RegisterResource("netbox:index/availablePrefix:AvailablePrefix", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAvailablePrefix gets an existing AvailablePrefix resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAvailablePrefix(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AvailablePrefixState, opts ...pulumi.ResourceOption) (*AvailablePrefix, error) {
	var resource AvailablePrefix
	err := ctx.ReadResource("netbox:index/availablePrefix:AvailablePrefix", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AvailablePrefix resources.
type availablePrefixState struct {
	Description    *string  `pulumi:"description"`
	IsPool         *bool    `pulumi:"isPool"`
	MarkUtilized   *bool    `pulumi:"markUtilized"`
	ParentPrefixId *int     `pulumi:"parentPrefixId"`
	Prefix         *string  `pulumi:"prefix"`
	PrefixLength   *int     `pulumi:"prefixLength"`
	RoleId         *int     `pulumi:"roleId"`
	SiteId         *int     `pulumi:"siteId"`
	Status         *string  `pulumi:"status"`
	Tags           []string `pulumi:"tags"`
	TenantId       *int     `pulumi:"tenantId"`
	VlanId         *int     `pulumi:"vlanId"`
	VrfId          *int     `pulumi:"vrfId"`
}

type AvailablePrefixState struct {
	Description    pulumi.StringPtrInput
	IsPool         pulumi.BoolPtrInput
	MarkUtilized   pulumi.BoolPtrInput
	ParentPrefixId pulumi.IntPtrInput
	Prefix         pulumi.StringPtrInput
	PrefixLength   pulumi.IntPtrInput
	RoleId         pulumi.IntPtrInput
	SiteId         pulumi.IntPtrInput
	Status         pulumi.StringPtrInput
	Tags           pulumi.StringArrayInput
	TenantId       pulumi.IntPtrInput
	VlanId         pulumi.IntPtrInput
	VrfId          pulumi.IntPtrInput
}

func (AvailablePrefixState) ElementType() reflect.Type {
	return reflect.TypeOf((*availablePrefixState)(nil)).Elem()
}

type availablePrefixArgs struct {
	Description    *string  `pulumi:"description"`
	IsPool         *bool    `pulumi:"isPool"`
	MarkUtilized   *bool    `pulumi:"markUtilized"`
	ParentPrefixId int      `pulumi:"parentPrefixId"`
	PrefixLength   int      `pulumi:"prefixLength"`
	RoleId         *int     `pulumi:"roleId"`
	SiteId         *int     `pulumi:"siteId"`
	Status         string   `pulumi:"status"`
	Tags           []string `pulumi:"tags"`
	TenantId       *int     `pulumi:"tenantId"`
	VlanId         *int     `pulumi:"vlanId"`
	VrfId          *int     `pulumi:"vrfId"`
}

// The set of arguments for constructing a AvailablePrefix resource.
type AvailablePrefixArgs struct {
	Description    pulumi.StringPtrInput
	IsPool         pulumi.BoolPtrInput
	MarkUtilized   pulumi.BoolPtrInput
	ParentPrefixId pulumi.IntInput
	PrefixLength   pulumi.IntInput
	RoleId         pulumi.IntPtrInput
	SiteId         pulumi.IntPtrInput
	Status         pulumi.StringInput
	Tags           pulumi.StringArrayInput
	TenantId       pulumi.IntPtrInput
	VlanId         pulumi.IntPtrInput
	VrfId          pulumi.IntPtrInput
}

func (AvailablePrefixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*availablePrefixArgs)(nil)).Elem()
}

type AvailablePrefixInput interface {
	pulumi.Input

	ToAvailablePrefixOutput() AvailablePrefixOutput
	ToAvailablePrefixOutputWithContext(ctx context.Context) AvailablePrefixOutput
}

func (*AvailablePrefix) ElementType() reflect.Type {
	return reflect.TypeOf((**AvailablePrefix)(nil)).Elem()
}

func (i *AvailablePrefix) ToAvailablePrefixOutput() AvailablePrefixOutput {
	return i.ToAvailablePrefixOutputWithContext(context.Background())
}

func (i *AvailablePrefix) ToAvailablePrefixOutputWithContext(ctx context.Context) AvailablePrefixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailablePrefixOutput)
}

// AvailablePrefixArrayInput is an input type that accepts AvailablePrefixArray and AvailablePrefixArrayOutput values.
// You can construct a concrete instance of `AvailablePrefixArrayInput` via:
//
//	AvailablePrefixArray{ AvailablePrefixArgs{...} }
type AvailablePrefixArrayInput interface {
	pulumi.Input

	ToAvailablePrefixArrayOutput() AvailablePrefixArrayOutput
	ToAvailablePrefixArrayOutputWithContext(context.Context) AvailablePrefixArrayOutput
}

type AvailablePrefixArray []AvailablePrefixInput

func (AvailablePrefixArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AvailablePrefix)(nil)).Elem()
}

func (i AvailablePrefixArray) ToAvailablePrefixArrayOutput() AvailablePrefixArrayOutput {
	return i.ToAvailablePrefixArrayOutputWithContext(context.Background())
}

func (i AvailablePrefixArray) ToAvailablePrefixArrayOutputWithContext(ctx context.Context) AvailablePrefixArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailablePrefixArrayOutput)
}

// AvailablePrefixMapInput is an input type that accepts AvailablePrefixMap and AvailablePrefixMapOutput values.
// You can construct a concrete instance of `AvailablePrefixMapInput` via:
//
//	AvailablePrefixMap{ "key": AvailablePrefixArgs{...} }
type AvailablePrefixMapInput interface {
	pulumi.Input

	ToAvailablePrefixMapOutput() AvailablePrefixMapOutput
	ToAvailablePrefixMapOutputWithContext(context.Context) AvailablePrefixMapOutput
}

type AvailablePrefixMap map[string]AvailablePrefixInput

func (AvailablePrefixMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AvailablePrefix)(nil)).Elem()
}

func (i AvailablePrefixMap) ToAvailablePrefixMapOutput() AvailablePrefixMapOutput {
	return i.ToAvailablePrefixMapOutputWithContext(context.Background())
}

func (i AvailablePrefixMap) ToAvailablePrefixMapOutputWithContext(ctx context.Context) AvailablePrefixMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailablePrefixMapOutput)
}

type AvailablePrefixOutput struct{ *pulumi.OutputState }

func (AvailablePrefixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvailablePrefix)(nil)).Elem()
}

func (o AvailablePrefixOutput) ToAvailablePrefixOutput() AvailablePrefixOutput {
	return o
}

func (o AvailablePrefixOutput) ToAvailablePrefixOutputWithContext(ctx context.Context) AvailablePrefixOutput {
	return o
}

func (o AvailablePrefixOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AvailablePrefixOutput) IsPool() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.BoolPtrOutput { return v.IsPool }).(pulumi.BoolPtrOutput)
}

func (o AvailablePrefixOutput) MarkUtilized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.BoolPtrOutput { return v.MarkUtilized }).(pulumi.BoolPtrOutput)
}

func (o AvailablePrefixOutput) ParentPrefixId() pulumi.IntOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.IntOutput { return v.ParentPrefixId }).(pulumi.IntOutput)
}

func (o AvailablePrefixOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

func (o AvailablePrefixOutput) PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.IntOutput { return v.PrefixLength }).(pulumi.IntOutput)
}

func (o AvailablePrefixOutput) RoleId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.IntPtrOutput { return v.RoleId }).(pulumi.IntPtrOutput)
}

func (o AvailablePrefixOutput) SiteId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.IntPtrOutput { return v.SiteId }).(pulumi.IntPtrOutput)
}

func (o AvailablePrefixOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o AvailablePrefixOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o AvailablePrefixOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.IntPtrOutput { return v.TenantId }).(pulumi.IntPtrOutput)
}

func (o AvailablePrefixOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.IntPtrOutput { return v.VlanId }).(pulumi.IntPtrOutput)
}

func (o AvailablePrefixOutput) VrfId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailablePrefix) pulumi.IntPtrOutput { return v.VrfId }).(pulumi.IntPtrOutput)
}

type AvailablePrefixArrayOutput struct{ *pulumi.OutputState }

func (AvailablePrefixArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AvailablePrefix)(nil)).Elem()
}

func (o AvailablePrefixArrayOutput) ToAvailablePrefixArrayOutput() AvailablePrefixArrayOutput {
	return o
}

func (o AvailablePrefixArrayOutput) ToAvailablePrefixArrayOutputWithContext(ctx context.Context) AvailablePrefixArrayOutput {
	return o
}

func (o AvailablePrefixArrayOutput) Index(i pulumi.IntInput) AvailablePrefixOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AvailablePrefix {
		return vs[0].([]*AvailablePrefix)[vs[1].(int)]
	}).(AvailablePrefixOutput)
}

type AvailablePrefixMapOutput struct{ *pulumi.OutputState }

func (AvailablePrefixMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AvailablePrefix)(nil)).Elem()
}

func (o AvailablePrefixMapOutput) ToAvailablePrefixMapOutput() AvailablePrefixMapOutput {
	return o
}

func (o AvailablePrefixMapOutput) ToAvailablePrefixMapOutputWithContext(ctx context.Context) AvailablePrefixMapOutput {
	return o
}

func (o AvailablePrefixMapOutput) MapIndex(k pulumi.StringInput) AvailablePrefixOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AvailablePrefix {
		return vs[0].(map[string]*AvailablePrefix)[vs[1].(string)]
	}).(AvailablePrefixOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AvailablePrefixInput)(nil)).Elem(), &AvailablePrefix{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailablePrefixArrayInput)(nil)).Elem(), AvailablePrefixArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailablePrefixMapInput)(nil)).Elem(), AvailablePrefixMap{})
	pulumi.RegisterOutputType(AvailablePrefixOutput{})
	pulumi.RegisterOutputType(AvailablePrefixArrayOutput{})
	pulumi.RegisterOutputType(AvailablePrefixMapOutput{})
}
