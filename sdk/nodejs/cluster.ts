// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/virtualization/#clusters):
 *
 * > A cluster is a logical grouping of physical resources within which virtual machines run. A cluster must be assigned a type (technological classification), and may optionally be assigned to a cluster group, site, and/or tenant. Each cluster must have a unique name within its assigned group and/or site, if any.
 * > 
 * > Physical devices may be associated with clusters as hosts. This allows users to track on which host(s) a particular virtual machine may reside. However, NetBox does not support pinning a specific VM within a cluster to a particular host device.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@pulumi/netbox";
 * import * as pulumi_netbox from "pulumi-netbox";
 *
 * const dcWest = netbox.getClusterGroup({
 *     name: "dc-west",
 * });
 * const vmwVsphere = new netbox.ClusterType("vmwVsphere", {});
 * const vmwCluster01 = new netbox.Cluster("vmwCluster01", {
 *     clusterTypeId: vmwVsphere.id,
 *     clusterGroupId: dcWest.then(dcWest => dcWest.id),
 * });
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public readonly clusterGroupId!: pulumi.Output<number | undefined>;
    public readonly clusterTypeId!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly siteId!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["clusterGroupId"] = state ? state.clusterGroupId : undefined;
            resourceInputs["clusterTypeId"] = state ? state.clusterTypeId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.clusterTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterTypeId'");
            }
            resourceInputs["clusterGroupId"] = args ? args.clusterGroupId : undefined;
            resourceInputs["clusterTypeId"] = args ? args.clusterTypeId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    clusterGroupId?: pulumi.Input<number>;
    clusterTypeId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    siteId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    clusterGroupId?: pulumi.Input<number>;
    clusterTypeId: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    siteId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
