// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/ipam/#ip-ranges):
 *
 * > This model represents an arbitrary range of individual IPv4 or IPv6 addresses, inclusive of its starting and ending addresses. For instance, the range 192.0.2.10 to 192.0.2.20 has eleven members. (The total member count is available as the size property on an IPRange instance.) Like prefixes and IP addresses, each IP range may optionally be assigned to a VRF and/or tenant.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@pulumi/netbox";
 *
 * const custAProd = new netbox.IpRange("cust_a_prod", {
 *     endAddress: "10.0.0.50/24",
 *     startAddress: "10.0.0.1/24",
 *     tags: [
 *         "customer-a",
 *         "prod",
 *     ],
 * });
 * ```
 */
export class IpRange extends pulumi.CustomResource {
    /**
     * Get an existing IpRange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpRangeState, opts?: pulumi.CustomResourceOptions): IpRange {
        return new IpRange(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:index/ipRange:IpRange';

    /**
     * Returns true if the given object is an instance of IpRange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpRange {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpRange.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly endAddress!: pulumi.Output<string>;
    public readonly roleId!: pulumi.Output<number | undefined>;
    public readonly startAddress!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly tenantId!: pulumi.Output<number | undefined>;
    public readonly vrfId!: pulumi.Output<number | undefined>;

    /**
     * Create a IpRange resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpRangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpRangeArgs | IpRangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpRangeState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endAddress"] = state ? state.endAddress : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["startAddress"] = state ? state.startAddress : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["vrfId"] = state ? state.vrfId : undefined;
        } else {
            const args = argsOrState as IpRangeArgs | undefined;
            if ((!args || args.endAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endAddress'");
            }
            if ((!args || args.startAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startAddress'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endAddress"] = args ? args.endAddress : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["startAddress"] = args ? args.startAddress : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["vrfId"] = args ? args.vrfId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpRange.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpRange resources.
 */
export interface IpRangeState {
    description?: pulumi.Input<string>;
    endAddress?: pulumi.Input<string>;
    roleId?: pulumi.Input<number>;
    startAddress?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<number>;
    vrfId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a IpRange resource.
 */
export interface IpRangeArgs {
    description?: pulumi.Input<string>;
    endAddress: pulumi.Input<string>;
    roleId?: pulumi.Input<number>;
    startAddress: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<number>;
    vrfId?: pulumi.Input<number>;
}
