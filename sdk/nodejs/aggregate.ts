// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/core-functionality/ipam/#aggregates):
 *
 * > NetBox allows us to specify the portions of IP space that are interesting to us by defining aggregates. Typically, an aggregate will correspond to either an allocation of public (globally routable) IP space granted by a regional authority, or a private (internally-routable) designation.
 */
export class Aggregate extends pulumi.CustomResource {
    /**
     * Get an existing Aggregate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AggregateState, opts?: pulumi.CustomResourceOptions): Aggregate {
        return new Aggregate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:index/aggregate:Aggregate';

    /**
     * Returns true if the given object is an instance of Aggregate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Aggregate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Aggregate.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly prefix!: pulumi.Output<string>;
    public readonly rirId!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly tenantId!: pulumi.Output<number | undefined>;

    /**
     * Create a Aggregate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AggregateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AggregateArgs | AggregateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AggregateState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["rirId"] = state ? state.rirId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as AggregateArgs | undefined;
            if ((!args || args.prefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["rirId"] = args ? args.rirId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Aggregate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Aggregate resources.
 */
export interface AggregateState {
    description?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    rirId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Aggregate resource.
 */
export interface AggregateArgs {
    description?: pulumi.Input<string>;
    prefix: pulumi.Input<string>;
    rirId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<number>;
}
